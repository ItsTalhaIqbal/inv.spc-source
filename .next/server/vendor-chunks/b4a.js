"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/b4a";
exports.ids = ["vendor-chunks/b4a"];
exports.modules = {

/***/ "(rsc)/./node_modules/b4a/index.js":
/*!***********************************!*\
  !*** ./node_modules/b4a/index.js ***!
  \***********************************/
/***/ ((module) => {

eval("\nfunction isBuffer(value) {\n    return Buffer.isBuffer(value) || value instanceof Uint8Array;\n}\nfunction isEncoding(encoding) {\n    return Buffer.isEncoding(encoding);\n}\nfunction alloc(size, fill, encoding) {\n    return Buffer.alloc(size, fill, encoding);\n}\nfunction allocUnsafe(size) {\n    return Buffer.allocUnsafe(size);\n}\nfunction allocUnsafeSlow(size) {\n    return Buffer.allocUnsafeSlow(size);\n}\nfunction byteLength(string, encoding) {\n    return Buffer.byteLength(string, encoding);\n}\nfunction compare(a, b) {\n    return Buffer.compare(a, b);\n}\nfunction concat(buffers, totalLength) {\n    return Buffer.concat(buffers, totalLength);\n}\nfunction copy(source, target, targetStart, start, end) {\n    return toBuffer(source).copy(target, targetStart, start, end);\n}\nfunction equals(a, b) {\n    return toBuffer(a).equals(b);\n}\nfunction fill(buffer, value, offset, end, encoding) {\n    return toBuffer(buffer).fill(value, offset, end, encoding);\n}\nfunction from(value, encodingOrOffset, length) {\n    return Buffer.from(value, encodingOrOffset, length);\n}\nfunction includes(buffer, value, byteOffset, encoding) {\n    return toBuffer(buffer).includes(value, byteOffset, encoding);\n}\nfunction indexOf(buffer, value, byfeOffset, encoding) {\n    return toBuffer(buffer).indexOf(value, byfeOffset, encoding);\n}\nfunction lastIndexOf(buffer, value, byteOffset, encoding) {\n    return toBuffer(buffer).lastIndexOf(value, byteOffset, encoding);\n}\nfunction swap16(buffer) {\n    return toBuffer(buffer).swap16();\n}\nfunction swap32(buffer) {\n    return toBuffer(buffer).swap32();\n}\nfunction swap64(buffer) {\n    return toBuffer(buffer).swap64();\n}\nfunction toBuffer(buffer) {\n    if (Buffer.isBuffer(buffer)) return buffer;\n    return Buffer.from(buffer.buffer, buffer.byteOffset, buffer.byteLength);\n}\nfunction toString(buffer, encoding, start, end) {\n    return toBuffer(buffer).toString(encoding, start, end);\n}\nfunction write(buffer, string, offset, length, encoding) {\n    return toBuffer(buffer).write(string, offset, length, encoding);\n}\nfunction writeDoubleLE(buffer, value, offset) {\n    return toBuffer(buffer).writeDoubleLE(value, offset);\n}\nfunction writeFloatLE(buffer, value, offset) {\n    return toBuffer(buffer).writeFloatLE(value, offset);\n}\nfunction writeUInt32LE(buffer, value, offset) {\n    return toBuffer(buffer).writeUInt32LE(value, offset);\n}\nfunction writeInt32LE(buffer, value, offset) {\n    return toBuffer(buffer).writeInt32LE(value, offset);\n}\nfunction readDoubleLE(buffer, offset) {\n    return toBuffer(buffer).readDoubleLE(offset);\n}\nfunction readFloatLE(buffer, offset) {\n    return toBuffer(buffer).readFloatLE(offset);\n}\nfunction readUInt32LE(buffer, offset) {\n    return toBuffer(buffer).readUInt32LE(offset);\n}\nfunction readInt32LE(buffer, offset) {\n    return toBuffer(buffer).readInt32LE(offset);\n}\nfunction writeDoubleBE(buffer, value, offset) {\n    return toBuffer(buffer).writeDoubleBE(value, offset);\n}\nfunction writeFloatBE(buffer, value, offset) {\n    return toBuffer(buffer).writeFloatBE(value, offset);\n}\nfunction writeUInt32BE(buffer, value, offset) {\n    return toBuffer(buffer).writeUInt32BE(value, offset);\n}\nfunction writeInt32BE(buffer, value, offset) {\n    return toBuffer(buffer).writeInt32BE(value, offset);\n}\nfunction readDoubleBE(buffer, offset) {\n    return toBuffer(buffer).readDoubleBE(offset);\n}\nfunction readFloatBE(buffer, offset) {\n    return toBuffer(buffer).readFloatBE(offset);\n}\nfunction readUInt32BE(buffer, offset) {\n    return toBuffer(buffer).readUInt32BE(offset);\n}\nfunction readInt32BE(buffer, offset) {\n    return toBuffer(buffer).readInt32BE(offset);\n}\nmodule.exports = {\n    isBuffer,\n    isEncoding,\n    alloc,\n    allocUnsafe,\n    allocUnsafeSlow,\n    byteLength,\n    compare,\n    concat,\n    copy,\n    equals,\n    fill,\n    from,\n    includes,\n    indexOf,\n    lastIndexOf,\n    swap16,\n    swap32,\n    swap64,\n    toBuffer,\n    toString,\n    write,\n    writeDoubleLE,\n    writeFloatLE,\n    writeUInt32LE,\n    writeInt32LE,\n    readDoubleLE,\n    readFloatLE,\n    readUInt32LE,\n    readInt32LE,\n    writeDoubleBE,\n    writeFloatBE,\n    writeUInt32BE,\n    writeInt32BE,\n    readDoubleBE,\n    readFloatBE,\n    readUInt32BE,\n    readInt32BE\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/b4a/index.js\n");

/***/ })

};
;