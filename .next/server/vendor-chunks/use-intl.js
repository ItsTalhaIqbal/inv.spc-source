"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/use-intl";
exports.ids = ["vendor-chunks/use-intl"];
exports.modules = {

/***/ "(ssr)/./node_modules/use-intl/dist/index.js":
/*!*********************************************!*\
  !*** ./node_modules/use-intl/dist/index.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\n\nif (false) {} else {\n  module.exports = __webpack_require__(/*! ./use-intl.cjs.development.js */ \"(ssr)/./node_modules/use-intl/dist/use-intl.cjs.development.js\")\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdXNlLWludGwvZGlzdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiO0FBQ1k7O0FBRVosSUFBSSxLQUFxQyxFQUFFLEVBRTFDLENBQUM7QUFDRixFQUFFLDJJQUF5RDtBQUMzRCIsInNvdXJjZXMiOlsid2VicGFjazovL2ludm9pZnkvLi9ub2RlX21vZHVsZXMvdXNlLWludGwvZGlzdC9pbmRleC5qcz9iOWU2Il0sInNvdXJjZXNDb250ZW50IjpbIlxuJ3VzZSBzdHJpY3QnXG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi91c2UtaW50bC5janMucHJvZHVjdGlvbi5taW4uanMnKVxufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL3VzZS1pbnRsLmNqcy5kZXZlbG9wbWVudC5qcycpXG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/use-intl/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/use-intl/dist/use-intl.cjs.development.js":
/*!****************************************************************!*\
  !*** ./node_modules/use-intl/dist/use-intl.cjs.development.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nvar IntlMessageFormat = __webpack_require__(/*! intl-messageformat */ \"(ssr)/./node_modules/intl-messageformat/index.js\");\nvar React = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n\nfunction _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\nvar IntlMessageFormat__default = /*#__PURE__*/_interopDefaultLegacy(IntlMessageFormat);\nvar React__default = /*#__PURE__*/_interopDefaultLegacy(React);\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  _setPrototypeOf(subClass, superClass);\n}\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\nfunction _construct(Parent, args, Class) {\n  if (_isNativeReflectConstruct()) {\n    _construct = Reflect.construct.bind();\n  } else {\n    _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) _setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n  return _construct.apply(null, arguments);\n}\nfunction _isNativeFunction(fn) {\n  return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n}\nfunction _wrapNativeSuper(Class) {\n  var _cache = typeof Map === \"function\" ? new Map() : undefined;\n  _wrapNativeSuper = function _wrapNativeSuper(Class) {\n    if (Class === null || !_isNativeFunction(Class)) return Class;\n    if (typeof Class !== \"function\") {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    if (typeof _cache !== \"undefined\") {\n      if (_cache.has(Class)) return _cache.get(Class);\n      _cache.set(Class, Wrapper);\n    }\n    function Wrapper() {\n      return _construct(Class, arguments, _getPrototypeOf(this).constructor);\n    }\n    Wrapper.prototype = Object.create(Class.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    return _setPrototypeOf(Wrapper, Class);\n  };\n  return _wrapNativeSuper(Class);\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\n\nexports.IntlErrorCode = void 0;\n(function (IntlErrorCode) {\n  IntlErrorCode[\"MISSING_MESSAGE\"] = \"MISSING_MESSAGE\";\n  IntlErrorCode[\"MISSING_FORMAT\"] = \"MISSING_FORMAT\";\n  IntlErrorCode[\"ENVIRONMENT_FALLBACK\"] = \"ENVIRONMENT_FALLBACK\";\n  IntlErrorCode[\"INSUFFICIENT_PATH\"] = \"INSUFFICIENT_PATH\";\n  IntlErrorCode[\"INVALID_MESSAGE\"] = \"INVALID_MESSAGE\";\n  IntlErrorCode[\"INVALID_KEY\"] = \"INVALID_KEY\";\n  IntlErrorCode[\"FORMATTING_ERROR\"] = \"FORMATTING_ERROR\";\n})(exports.IntlErrorCode || (exports.IntlErrorCode = {}));\nvar IntlError = /*#__PURE__*/function (_Error) {\n  _inheritsLoose(IntlError, _Error);\n  function IntlError(code, originalMessage) {\n    var _this;\n    var message = code;\n    if (originalMessage) {\n      message += ': ' + originalMessage;\n    }\n    _this = _Error.call(this, message) || this;\n    _this.code = void 0;\n    _this.originalMessage = void 0;\n    _this.code = code;\n    if (originalMessage) {\n      _this.originalMessage = originalMessage;\n    }\n    return _this;\n  }\n  return IntlError;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n\nfunction setTimeZoneInFormats(formats, timeZone) {\n  if (!formats) return formats;\n  // The only way to set a time zone with `intl-messageformat` is to merge it into the formats\n  // https://github.com/formatjs/formatjs/blob/8256c5271505cf2606e48e3c97ecdd16ede4f1b5/packages/intl/src/message.ts#L15\n  return Object.keys(formats).reduce(function (acc, key) {\n    acc[key] = _extends({\n      timeZone: timeZone\n    }, formats[key]);\n    return acc;\n  }, {});\n}\n/**\r\n * `intl-messageformat` uses separate keys for `date` and `time`, but there's\r\n * only one native API: `Intl.DateTimeFormat`. Additionally you might want to\r\n * include both a time and a date in a value, therefore the separation doesn't\r\n * seem so useful. We offer a single `dateTime` namespace instead, but we have\r\n * to convert the format before `intl-messageformat` can be used.\r\n */\nfunction convertFormatsToIntlMessageFormat(formats, timeZone) {\n  var formatsWithTimeZone = timeZone ? _extends({}, formats, {\n    dateTime: setTimeZoneInFormats(formats.dateTime, timeZone)\n  }) : formats;\n  var mfDateDefaults = IntlMessageFormat__default[\"default\"].formats.date;\n  var defaultDateFormats = timeZone ? setTimeZoneInFormats(mfDateDefaults, timeZone) : mfDateDefaults;\n  var mfTimeDefaults = IntlMessageFormat__default[\"default\"].formats.time;\n  var defaultTimeFormats = timeZone ? setTimeZoneInFormats(mfTimeDefaults, timeZone) : mfTimeDefaults;\n  return _extends({}, formatsWithTimeZone, {\n    date: _extends({}, defaultDateFormats, formatsWithTimeZone == null ? void 0 : formatsWithTimeZone.dateTime),\n    time: _extends({}, defaultTimeFormats, formatsWithTimeZone == null ? void 0 : formatsWithTimeZone.dateTime)\n  });\n}\n\n/**\r\n * Contains defaults that are used for all entry points into the core.\r\n * See also `InitializedIntlConfiguration`.\r\n */\nfunction defaultGetMessageFallback(props) {\n  return [props.namespace, props.key].filter(function (part) {\n    return part != null;\n  }).join('.');\n}\nfunction defaultOnError(error) {\n  console.error(error);\n}\n\nfunction resolvePath(messages, key, namespace) {\n  if (!messages) {\n    throw new Error(\"No messages available at `\" + namespace + \"`.\" );\n  }\n  var message = messages;\n  key.split('.').forEach(function (part) {\n    var next = message[part];\n    if (part == null || next == null) {\n      throw new Error(\"Could not resolve `\" + key + \"` in \" + (namespace ? \"`\" + namespace + \"`\" : 'messages') + \".\" );\n    }\n    message = next;\n  });\n  return message;\n}\nfunction prepareTranslationValues(values) {\n  if (Object.keys(values).length === 0) return undefined;\n  // Workaround for https://github.com/formatjs/formatjs/issues/1467\n  var transformedValues = {};\n  Object.keys(values).forEach(function (key) {\n    var index = 0;\n    var value = values[key];\n    var transformed;\n    if (typeof value === 'function') {\n      transformed = function transformed(chunks) {\n        var result = value(chunks);\n        return React.isValidElement(result) ? React.cloneElement(result, {\n          key: key + index++\n        }) : result;\n      };\n    } else {\n      transformed = value;\n    }\n    transformedValues[key] = transformed;\n  });\n  return transformedValues;\n}\nfunction getMessagesOrError(_ref) {\n  var messages = _ref.messages,\n    namespace = _ref.namespace,\n    _ref$onError = _ref.onError,\n    onError = _ref$onError === void 0 ? defaultOnError : _ref$onError;\n  try {\n    if (!messages) {\n      throw new Error( true ? \"No messages were configured on the provider.\" : 0);\n    }\n    var retrievedMessages = namespace ? resolvePath(messages, namespace) : messages;\n    if (!retrievedMessages) {\n      throw new Error( true ? \"No messages for namespace `\" + namespace + \"` found.\" : 0);\n    }\n    return retrievedMessages;\n  } catch (error) {\n    var intlError = new IntlError(exports.IntlErrorCode.MISSING_MESSAGE, error.message);\n    onError(intlError);\n    return intlError;\n  }\n}\nfunction getPlainMessage(candidate, values) {\n  if (values) return undefined;\n  var unescapedMessage = candidate.replace(/'([{}])/gi, '$1');\n  // Placeholders can be in the message if there are default values,\n  // or if the user has forgotten to provide values. In the latter\n  // case we need to compile the message to receive an error.\n  var hasPlaceholders = /<|{/.test(unescapedMessage);\n  if (!hasPlaceholders) {\n    return unescapedMessage;\n  }\n  return undefined;\n}\nfunction createBaseTranslator(_ref2) {\n  var defaultTranslationValues = _ref2.defaultTranslationValues,\n    globalFormats = _ref2.formats,\n    _ref2$getMessageFallb = _ref2.getMessageFallback,\n    getMessageFallback = _ref2$getMessageFallb === void 0 ? defaultGetMessageFallback : _ref2$getMessageFallb,\n    locale = _ref2.locale,\n    messageFormatCache = _ref2.messageFormatCache,\n    messagesOrError = _ref2.messagesOrError,\n    namespace = _ref2.namespace,\n    onError = _ref2.onError,\n    timeZone = _ref2.timeZone;\n  function getFallbackFromErrorAndNotify(key, code, message) {\n    var error = new IntlError(code, message);\n    onError(error);\n    return getMessageFallback({\n      error: error,\n      key: key,\n      namespace: namespace\n    });\n  }\n  function translateBaseFn( /** Use a dot to indicate a level of nesting (e.g. `namespace.nestedLabel`). */\n  key, /** Key value pairs for values to interpolate into the message. */\n  values, /** Provide custom formats for numbers, dates and times. */\n  formats) {\n    if (messagesOrError instanceof IntlError) {\n      // We have already warned about this during render\n      return getMessageFallback({\n        error: messagesOrError,\n        key: key,\n        namespace: namespace\n      });\n    }\n    var messages = messagesOrError;\n    var message;\n    try {\n      message = resolvePath(messages, key, namespace);\n    } catch (error) {\n      return getFallbackFromErrorAndNotify(key, exports.IntlErrorCode.MISSING_MESSAGE, error.message);\n    }\n    function joinPath(parts) {\n      return parts.filter(function (part) {\n        return part != null;\n      }).join('.');\n    }\n    var cacheKey = joinPath([locale, namespace, key, String(message)]);\n    var messageFormat;\n    if (messageFormatCache != null && messageFormatCache.has(cacheKey)) {\n      messageFormat = messageFormatCache.get(cacheKey);\n    } else {\n      if (typeof message === 'object') {\n        var code, errorMessage;\n        if (Array.isArray(message)) {\n          code = exports.IntlErrorCode.INVALID_MESSAGE;\n          {\n            errorMessage = \"Message at `\" + joinPath([namespace, key]) + \"` resolved to an array, but only strings are supported. See https://next-intl-docs.vercel.app/docs/usage/messages#arrays-of-messages\";\n          }\n        } else {\n          code = exports.IntlErrorCode.INSUFFICIENT_PATH;\n          {\n            errorMessage = \"Message at `\" + joinPath([namespace, key]) + \"` resolved to an object, but only strings are supported. Use a `.` to retrieve nested messages. See https://next-intl-docs.vercel.app/docs/usage/messages#structuring-messages\";\n          }\n        }\n        return getFallbackFromErrorAndNotify(key, code, errorMessage);\n      }\n      // Hot path that avoids creating an `IntlMessageFormat` instance\n      var plainMessage = getPlainMessage(message, values);\n      if (plainMessage) return plainMessage;\n      try {\n        messageFormat = new IntlMessageFormat__default[\"default\"](message, locale, convertFormatsToIntlMessageFormat(_extends({}, globalFormats, formats), timeZone));\n      } catch (error) {\n        return getFallbackFromErrorAndNotify(key, exports.IntlErrorCode.INVALID_MESSAGE, error.message);\n      }\n      messageFormatCache == null || messageFormatCache.set(cacheKey, messageFormat);\n    }\n    try {\n      var formattedMessage = messageFormat.format(\n      // @ts-ignore `intl-messageformat` expects a different format\n      // for rich text elements since a recent minor update. This\n      // needs to be evaluated in detail, possibly also in regards\n      // to be able to format to parts.\n      prepareTranslationValues(_extends({}, defaultTranslationValues, values)));\n      if (formattedMessage == null) {\n        throw new Error( true ? \"Unable to format `\" + key + \"` in \" + (namespace ? \"namespace `\" + namespace + \"`\" : 'messages') : 0);\n      }\n      // Limit the function signature to return strings or React elements\n      return React.isValidElement(formattedMessage) ||\n      // Arrays of React elements\n      Array.isArray(formattedMessage) || typeof formattedMessage === 'string' ? formattedMessage : String(formattedMessage);\n    } catch (error) {\n      return getFallbackFromErrorAndNotify(key, exports.IntlErrorCode.FORMATTING_ERROR, error.message);\n    }\n  }\n  function translateFn( /** Use a dot to indicate a level of nesting (e.g. `namespace.nestedLabel`). */\n  key, /** Key value pairs for values to interpolate into the message. */\n  values, /** Provide custom formats for numbers, dates and times. */\n  formats) {\n    var result = translateBaseFn(key, values, formats);\n    if (typeof result !== 'string') {\n      return getFallbackFromErrorAndNotify(key, exports.IntlErrorCode.INVALID_MESSAGE, \"The message `\" + key + \"` in \" + (namespace ? \"namespace `\" + namespace + \"`\" : 'messages') + \" didn't resolve to a string. If you want to format rich text, use `t.rich` instead.\" );\n    }\n    return result;\n  }\n  translateFn.rich = translateBaseFn;\n  translateFn.raw = function ( /** Use a dot to indicate a level of nesting (e.g. `namespace.nestedLabel`). */\n  key) {\n    if (messagesOrError instanceof IntlError) {\n      // We have already warned about this during render\n      return getMessageFallback({\n        error: messagesOrError,\n        key: key,\n        namespace: namespace\n      });\n    }\n    var messages = messagesOrError;\n    try {\n      return resolvePath(messages, key, namespace);\n    } catch (error) {\n      return getFallbackFromErrorAndNotify(key, exports.IntlErrorCode.MISSING_MESSAGE, error.message);\n    }\n  };\n  return translateFn;\n}\n\n/**\r\n * For the strictly typed messages to work we have to wrap the namespace into\r\n * a mandatory prefix. See https://stackoverflow.com/a/71529575/343045\r\n */\nfunction resolveNamespace(namespace, namespacePrefix) {\n  return namespace === namespacePrefix ? undefined : namespace.slice((namespacePrefix + '.').length);\n}\n\nvar _excluded$3 = [\"getMessageFallback\", \"messages\", \"namespace\", \"onError\"];\nfunction createTranslatorImpl(_ref, namespacePrefix) {\n  var getMessageFallback = _ref.getMessageFallback,\n    messages = _ref.messages,\n    namespace = _ref.namespace,\n    onError = _ref.onError,\n    rest = _objectWithoutPropertiesLoose(_ref, _excluded$3);\n  // The `namespacePrefix` is part of the type system.\n  // See the comment in the function invocation.\n  messages = messages[namespacePrefix];\n  namespace = resolveNamespace(namespace, namespacePrefix);\n  var translator = createBaseTranslator(_extends({}, rest, {\n    onError: onError,\n    getMessageFallback: getMessageFallback,\n    messagesOrError: getMessagesOrError({\n      messages: messages,\n      namespace: namespace,\n      onError: onError\n    })\n  }));\n  var originalRich = translator.rich;\n  function base() {\n    return translator.apply(void 0, arguments);\n  }\n  // Augment `t.rich` to return plain strings\n  base.rich = function (key, /** Key value pairs for values to interpolate into the message. */\n  values, formats) {\n    // `chunks` is returned as a string when no React element\n    // is used, therefore it's safe to cast this type.\n    var result = originalRich(key, values, formats);\n    // When only string chunks are provided to the parser, only strings should be returned here.\n    if (typeof result !== 'string') {\n      var error = new IntlError(exports.IntlErrorCode.FORMATTING_ERROR, \"`createTranslator` only accepts functions for rich text formatting that receive and return strings.\\n\\nE.g. t.rich('rich', {b: (chunks) => `<b>${chunks}</b>`})\" );\n      onError(error);\n      return getMessageFallback({\n        error: error,\n        key: key,\n        namespace: namespace\n      });\n    }\n    return result;\n  };\n  base.raw = translator.raw;\n  return base;\n}\n\nvar _excluded$2 = [\"getMessageFallback\", \"messages\", \"namespace\", \"onError\"];\n/**\r\n * Translates messages from the given namespace by using the ICU syntax.\r\n * See https://formatjs.io/docs/core-concepts/icu-syntax.\r\n *\r\n * If no namespace is provided, all available messages are returned.\r\n * The namespace can also indicate nesting by using a dot\r\n * (e.g. `namespace.Component`).\r\n */\nfunction createTranslator(_ref) {\n  var _ref$getMessageFallba = _ref.getMessageFallback,\n    getMessageFallback = _ref$getMessageFallba === void 0 ? defaultGetMessageFallback : _ref$getMessageFallba,\n    messages = _ref.messages,\n    namespace = _ref.namespace,\n    _ref$onError = _ref.onError,\n    onError = _ref$onError === void 0 ? defaultOnError : _ref$onError,\n    rest = _objectWithoutPropertiesLoose(_ref, _excluded$2);\n  // We have to wrap the actual function so the type inference for the optional\n  // namespace works correctly. See https://stackoverflow.com/a/71529575/343045\n  // The prefix (\"!\") is arbitrary.\n  return createTranslatorImpl(_extends({}, rest, {\n    onError: onError,\n    getMessageFallback: getMessageFallback,\n    messages: {\n      '!': messages\n    },\n    namespace: namespace ? \"!.\" + namespace : '!'\n  }), '!');\n}\n\nvar SECOND = 1;\nvar MINUTE = SECOND * 60;\nvar HOUR = MINUTE * 60;\nvar DAY = HOUR * 24;\nvar WEEK = DAY * 7;\nvar MONTH = DAY * (365 / 12); // Approximation\nvar QUARTER = MONTH * 3;\nvar YEAR = DAY * 365;\nvar UNIT_SECONDS = {\n  second: SECOND,\n  seconds: SECOND,\n  minute: MINUTE,\n  minutes: MINUTE,\n  hour: HOUR,\n  hours: HOUR,\n  day: DAY,\n  days: DAY,\n  week: WEEK,\n  weeks: WEEK,\n  month: MONTH,\n  months: MONTH,\n  quarter: QUARTER,\n  quarters: QUARTER,\n  year: YEAR,\n  years: YEAR\n};\nfunction resolveRelativeTimeUnit(seconds) {\n  var absValue = Math.abs(seconds);\n  if (absValue < MINUTE) {\n    return 'second';\n  } else if (absValue < HOUR) {\n    return 'minute';\n  } else if (absValue < DAY) {\n    return 'hour';\n  } else if (absValue < WEEK) {\n    return 'day';\n  } else if (absValue < MONTH) {\n    return 'week';\n  } else if (absValue < YEAR) {\n    return 'month';\n  }\n  return 'year';\n}\nfunction calculateRelativeTimeValue(seconds, unit) {\n  // We have to round the resulting values, as `Intl.RelativeTimeFormat`\n  // will include fractions like '2.1 hours ago'.\n  return Math.round(seconds / UNIT_SECONDS[unit]);\n}\nfunction createFormatter(_ref) {\n  var formats = _ref.formats,\n    locale = _ref.locale,\n    globalNow = _ref.now,\n    _ref$onError = _ref.onError,\n    onError = _ref$onError === void 0 ? defaultOnError : _ref$onError,\n    globalTimeZone = _ref.timeZone;\n  function resolveFormatOrOptions(typeFormats, formatOrOptions) {\n    var options;\n    if (typeof formatOrOptions === 'string') {\n      var formatName = formatOrOptions;\n      options = typeFormats == null ? void 0 : typeFormats[formatName];\n      if (!options) {\n        var error = new IntlError(exports.IntlErrorCode.MISSING_FORMAT, \"Format `\" + formatName + \"` is not available. You can configure it on the provider or provide custom options.\" );\n        onError(error);\n        throw error;\n      }\n    } else {\n      options = formatOrOptions;\n    }\n    return options;\n  }\n  function getFormattedValue(value, formatOrOptions, typeFormats, formatter) {\n    var options;\n    try {\n      options = resolveFormatOrOptions(typeFormats, formatOrOptions);\n    } catch (error) {\n      return String(value);\n    }\n    try {\n      return formatter(options);\n    } catch (error) {\n      onError(new IntlError(exports.IntlErrorCode.FORMATTING_ERROR, error.message));\n      return String(value);\n    }\n  }\n  function dateTime( /** If a number is supplied, this is interpreted as a UTC timestamp. */\n  value,\n  /** If a time zone is supplied, the `value` is converted to that time zone.\r\n   * Otherwise the user time zone will be used. */\n  formatOrOptions) {\n    return getFormattedValue(value, formatOrOptions, formats == null ? void 0 : formats.dateTime, function (options) {\n      var _options;\n      if (!((_options = options) != null && _options.timeZone)) {\n        if (globalTimeZone) {\n          options = _extends({}, options, {\n            timeZone: globalTimeZone\n          });\n        } else {\n          onError(new IntlError(exports.IntlErrorCode.ENVIRONMENT_FALLBACK,  true ? \"The `timeZone` parameter wasn't provided and there is no global default configured. Consider adding a global default to avoid markup mismatches caused by environment differences. Learn more: https://next-intl-docs.vercel.app/docs/configuration#time-zone\" : 0));\n        }\n      }\n      return new Intl.DateTimeFormat(locale, options).format(value);\n    });\n  }\n  function number(value, formatOrOptions) {\n    return getFormattedValue(value, formatOrOptions, formats == null ? void 0 : formats.number, function (options) {\n      return new Intl.NumberFormat(locale, options).format(value);\n    });\n  }\n  function getGlobalNow() {\n    if (globalNow) {\n      return globalNow;\n    } else {\n      onError(new IntlError(exports.IntlErrorCode.ENVIRONMENT_FALLBACK, \"The `now` parameter wasn't provided and there is no global default configured. Consider adding a global default to avoid markup mismatches caused by environment differences. Learn more: https://next-intl-docs.vercel.app/docs/configuration#now\" ));\n      return new Date();\n    }\n  }\n  function extractNowDate(nowOrOptions) {\n    if (nowOrOptions instanceof Date || typeof nowOrOptions === 'number') {\n      return new Date(nowOrOptions);\n    }\n    if ((nowOrOptions == null ? void 0 : nowOrOptions.now) !== undefined) {\n      return new Date(nowOrOptions.now);\n    }\n    return getGlobalNow();\n  }\n  function relativeTime( /** The date time that needs to be formatted. */\n  date, /** The reference point in time to which `date` will be formatted in relation to.  */\n  nowOrOptions) {\n    try {\n      var dateDate = new Date(date);\n      var nowDate = extractNowDate(nowOrOptions);\n      var seconds = (dateDate.getTime() - nowDate.getTime()) / 1000;\n      var unit = typeof nowOrOptions === 'number' || nowOrOptions instanceof Date || (nowOrOptions == null ? void 0 : nowOrOptions.unit) === undefined ? resolveRelativeTimeUnit(seconds) : nowOrOptions.unit;\n      var value = calculateRelativeTimeValue(seconds, unit);\n      return new Intl.RelativeTimeFormat(locale, {\n        numeric: 'auto'\n      }).format(value, unit);\n    } catch (error) {\n      onError(new IntlError(exports.IntlErrorCode.FORMATTING_ERROR, error.message));\n      return String(date);\n    }\n  }\n  function list(value, formatOrOptions) {\n    return getFormattedValue(value, formatOrOptions, formats == null ? void 0 : formats.list, function (options) {\n      return new Intl.ListFormat(locale, options).format(value);\n    });\n  }\n  return {\n    dateTime: dateTime,\n    number: number,\n    relativeTime: relativeTime,\n    list: list\n  };\n}\n\n/** @deprecated Switch to `createFormatter` */\nfunction createIntl() {\n  var formatter = createFormatter.apply(void 0, arguments);\n  return {\n    formatDateTime: formatter.dateTime,\n    formatNumber: formatter.number,\n    formatRelativeTime: formatter.relativeTime\n  };\n}\n\nvar IntlContext = /*#__PURE__*/React.createContext(undefined);\n\nfunction validateMessagesSegment(messages, invalidKeyLabels, parentPath) {\n  Object.entries(messages).forEach(function (_ref) {\n    var key = _ref[0],\n      messageOrMessages = _ref[1];\n    if (key.includes('.')) {\n      var keyLabel = key;\n      if (parentPath) keyLabel += \" (at \" + parentPath + \")\";\n      invalidKeyLabels.push(keyLabel);\n    }\n    if (messageOrMessages != null && typeof messageOrMessages === 'object') {\n      validateMessagesSegment(messageOrMessages, invalidKeyLabels, [parentPath, key].filter(function (part) {\n        return part != null;\n      }).join('.'));\n    }\n  });\n}\nfunction validateMessages(messages, onError) {\n  var invalidKeyLabels = [];\n  validateMessagesSegment(messages, invalidKeyLabels);\n  if (invalidKeyLabels.length > 0) {\n    onError(new IntlError(exports.IntlErrorCode.INVALID_KEY, \"Namespace keys can not contain the character \\\".\\\" as this is used to express nesting. Please remove it or replace it with another character.\\n\\nInvalid \" + (invalidKeyLabels.length === 1 ? 'key' : 'keys') + \": \" + invalidKeyLabels.join(', ') + \"\\n\\nIf you're migrating from a flat structure, you can convert your messages as follows:\\n\\nimport {set} from \\\"lodash\\\";\\n\\nconst input = {\\n  \\\"one.one\\\": \\\"1.1\\\",\\n  \\\"one.two\\\": \\\"1.2\\\",\\n  \\\"two.one.one\\\": \\\"2.1.1\\\"\\n};\\n\\nconst output = Object.entries(input).reduce(\\n  (acc, [key, value]) => set(acc, key, value),\\n  {}\\n);\\n\\n// Output:\\n//\\n// {\\n//   \\\"one\\\": {\\n//     \\\"one\\\": \\\"1.1\\\",\\n//     \\\"two\\\": \\\"1.2\\\"\\n//   },\\n//   \\\"two\\\": {\\n//     \\\"one\\\": {\\n//       \\\"one\\\": \\\"2.1.1\\\"\\n//     }\\n//   }\\n// }\\n\" ));\n  }\n}\n\nvar _excluded$1 = [\"getMessageFallback\", \"messages\", \"onError\"];\n/**\r\n * Enhances the incoming props with defaults.\r\n */\nfunction getInitializedConfig(_ref) {\n  var getMessageFallback = _ref.getMessageFallback,\n    messages = _ref.messages,\n    onError = _ref.onError,\n    rest = _objectWithoutPropertiesLoose(_ref, _excluded$1);\n  var finalOnError = onError || defaultOnError;\n  var finalGetMessageFallback = getMessageFallback || defaultGetMessageFallback;\n  {\n    if (messages) {\n      validateMessages(messages, finalOnError);\n    }\n  }\n  return _extends({}, rest, {\n    messages: messages,\n    onError: finalOnError,\n    getMessageFallback: finalGetMessageFallback\n  });\n}\n\nvar _excluded = [\"children\"];\nfunction IntlProvider(_ref) {\n  var children = _ref.children,\n    props = _objectWithoutPropertiesLoose(_ref, _excluded);\n  var _useState = React.useState(function () {\n      return new Map();\n    }),\n    messageFormatCache = _useState[0];\n  return React__default[\"default\"].createElement(IntlContext.Provider, {\n    value: _extends({}, getInitializedConfig(props), {\n      messageFormatCache: messageFormatCache\n    })\n  }, children);\n}\n\nfunction useIntlContext() {\n  var context = React.useContext(IntlContext);\n  if (!context) {\n    throw new Error('No intl context found. Have you configured the provider?' );\n  }\n  return context;\n}\n\nfunction useTranslationsImpl(allMessages, namespace, namespacePrefix) {\n  var _useIntlContext = useIntlContext(),\n    defaultTranslationValues = _useIntlContext.defaultTranslationValues,\n    globalFormats = _useIntlContext.formats,\n    getMessageFallback = _useIntlContext.getMessageFallback,\n    locale = _useIntlContext.locale,\n    messageFormatCache = _useIntlContext.messageFormatCache,\n    onError = _useIntlContext.onError,\n    timeZone = _useIntlContext.timeZone;\n  // The `namespacePrefix` is part of the type system.\n  // See the comment in the hook invocation.\n  allMessages = allMessages[namespacePrefix];\n  namespace = resolveNamespace(namespace, namespacePrefix);\n  var messagesOrError = React.useMemo(function () {\n    return getMessagesOrError({\n      messages: allMessages,\n      namespace: namespace,\n      onError: onError\n    });\n  }, [allMessages, namespace, onError]);\n  var translate = React.useMemo(function () {\n    return createBaseTranslator({\n      messageFormatCache: messageFormatCache,\n      getMessageFallback: getMessageFallback,\n      messagesOrError: messagesOrError,\n      defaultTranslationValues: defaultTranslationValues,\n      namespace: namespace,\n      onError: onError,\n      formats: globalFormats,\n      locale: locale,\n      timeZone: timeZone\n    });\n  }, [messageFormatCache, getMessageFallback, messagesOrError, defaultTranslationValues, namespace, onError, globalFormats, locale, timeZone]);\n  return translate;\n}\n\n/**\r\n * Translates messages from the given namespace by using the ICU syntax.\r\n * See https://formatjs.io/docs/core-concepts/icu-syntax.\r\n *\r\n * If no namespace is provided, all available messages are returned.\r\n * The namespace can also indicate nesting by using a dot\r\n * (e.g. `namespace.Component`).\r\n */\nfunction useTranslations(namespace) {\n  var context = useIntlContext();\n  var messages = context.messages;\n  // We have to wrap the actual hook so the type inference for the optional\n  // namespace works correctly. See https://stackoverflow.com/a/71529575/343045\n  // The prefix (\"!\") is arbitrary.\n  return useTranslationsImpl({\n    '!': messages\n  },\n  // @ts-expect-error\n  namespace ? \"!.\" + namespace : '!', '!');\n}\n\nfunction useLocale() {\n  return useIntlContext().locale;\n}\n\nfunction getNow() {\n  return new Date();\n}\n/**\r\n * Reading the current date via `new Date()` in components should be avoided, as\r\n * it causes components to be impure and can lead to flaky tests. Instead, this\r\n * hook can be used.\r\n *\r\n * By default, it returns the time when the component mounts. If `updateInterval`\r\n * is specified, the value will be updated based on the interval.\r\n *\r\n * You can however also return a static value from this hook, if you\r\n * configure the `now` parameter on the context provider. Note however,\r\n * that if `updateInterval` is configured in this case, the component\r\n * will initialize with the global value, but will afterwards update\r\n * continuously based on the interval.\r\n *\r\n * For unit tests, this can be mocked to a constant value. For end-to-end\r\n * testing, an environment parameter can be passed to the `now` parameter\r\n * of the provider to mock this to a static value.\r\n */\nfunction useNow(options) {\n  var updateInterval = options == null ? void 0 : options.updateInterval;\n  var _useIntlContext = useIntlContext(),\n    globalNow = _useIntlContext.now;\n  var _useState = React.useState(globalNow || getNow()),\n    now = _useState[0],\n    setNow = _useState[1];\n  React.useEffect(function () {\n    if (!updateInterval) return;\n    var intervalId = setInterval(function () {\n      setNow(getNow());\n    }, updateInterval);\n    return function () {\n      clearInterval(intervalId);\n    };\n  }, [globalNow, updateInterval]);\n  return now;\n}\n\nfunction useTimeZone() {\n  return useIntlContext().timeZone;\n}\n\nfunction useMessages() {\n  return useIntlContext().messages;\n}\n\nfunction useFormatter() {\n  var _useIntlContext = useIntlContext(),\n    formats = _useIntlContext.formats,\n    locale = _useIntlContext.locale,\n    globalNow = _useIntlContext.now,\n    onError = _useIntlContext.onError,\n    timeZone = _useIntlContext.timeZone;\n  return React.useMemo(function () {\n    return createFormatter({\n      formats: formats,\n      locale: locale,\n      now: globalNow,\n      onError: onError,\n      timeZone: timeZone\n    });\n  }, [formats, globalNow, locale, onError, timeZone]);\n}\n\nvar hasWarned = false;\n/** @deprecated Switch to `useFormatter` instead. */\nfunction useIntl() {\n  var _useIntlContext = useIntlContext(),\n    formats = _useIntlContext.formats,\n    locale = _useIntlContext.locale,\n    globalNow = _useIntlContext.now,\n    onError = _useIntlContext.onError,\n    timeZone = _useIntlContext.timeZone;\n  if (!hasWarned) {\n    hasWarned = true;\n    console.warn('`useIntl()` is deprecated and will be removed in the next major version. Please switch to `useFormatter()`.');\n  }\n  return React.useMemo(function () {\n    return createIntl({\n      formats: formats,\n      locale: locale,\n      now: globalNow,\n      onError: onError,\n      timeZone: timeZone\n    });\n  }, [formats, globalNow, locale, onError, timeZone]);\n}\n\nexports.IntlError = IntlError;\nexports.IntlProvider = IntlProvider;\nexports.createFormatter = createFormatter;\nexports.createIntl = createIntl;\nexports.createTranslator = createTranslator;\nexports.useFormatter = useFormatter;\nexports.useIntl = useIntl;\nexports.useLocale = useLocale;\nexports.useMessages = useMessages;\nexports.useNow = useNow;\nexports.useTimeZone = useTimeZone;\nexports.useTranslations = useTranslations;\n//# sourceMappingURL=use-intl.cjs.development.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/use-intl/dist/use-intl.cjs.development.js\n");

/***/ })

};
;