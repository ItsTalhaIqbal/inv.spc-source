"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@sparticuz";
exports.ids = ["vendor-chunks/@sparticuz"];
exports.modules = {

/***/ "(rsc)/./node_modules/@sparticuz/chromium/build/helper.js":
/*!**********************************************************!*\
  !*** ./node_modules/@sparticuz/chromium/build/helper.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.downloadAndExtract = exports.isRunningInAwsLambdaNode20 = exports.isRunningInAwsLambda = exports.isValidUrl = void 0;\nconst node_fs_1 = __webpack_require__(/*! node:fs */ \"node:fs\");\nconst follow_redirects_1 = __webpack_require__(/*! follow-redirects */ \"(rsc)/./node_modules/follow-redirects/index.js\");\nconst node_os_1 = __webpack_require__(/*! node:os */ \"node:os\");\nconst tar_fs_1 = __webpack_require__(/*! tar-fs */ \"(rsc)/./node_modules/tar-fs/index.js\");\nconst node_url_1 = __webpack_require__(/*! node:url */ \"node:url\");\nconst isValidUrl = (input)=>{\n    try {\n        return !!new URL(input);\n    } catch (err) {\n        return false;\n    }\n};\nexports.isValidUrl = isValidUrl;\n/**\n * Determines if the running instance is inside an AWS Lambda container.\n * AWS_EXECUTION_ENV is for native Lambda instances\n * AWS_LAMBDA_JS_RUNTIME is for netlify instances\n * @returns boolean indicating if the running instance is inside a Lambda container\n */ const isRunningInAwsLambda = ()=>{\n    if (process.env[\"AWS_EXECUTION_ENV\"] && process.env[\"AWS_EXECUTION_ENV\"].includes(\"AWS_Lambda_nodejs\") && !process.env[\"AWS_EXECUTION_ENV\"].includes(\"20.x\")) {\n        return true;\n    } else if (process.env[\"AWS_LAMBDA_JS_RUNTIME\"] && process.env[\"AWS_LAMBDA_JS_RUNTIME\"].includes(\"nodejs\") && !process.env[\"AWS_LAMBDA_JS_RUNTIME\"].includes(\"20.x\")) {\n        return true;\n    }\n    return false;\n};\nexports.isRunningInAwsLambda = isRunningInAwsLambda;\nconst isRunningInAwsLambdaNode20 = ()=>{\n    if (process.env[\"AWS_EXECUTION_ENV\"] && process.env[\"AWS_EXECUTION_ENV\"].includes(\"20.x\")) {\n        return true;\n    } else if (process.env[\"AWS_LAMBDA_JS_RUNTIME\"] && process.env[\"AWS_LAMBDA_JS_RUNTIME\"].includes(\"20.x\")) {\n        return true;\n    }\n    return false;\n};\nexports.isRunningInAwsLambdaNode20 = isRunningInAwsLambdaNode20;\nconst downloadAndExtract = async (url)=>new Promise((resolve, reject)=>{\n        const getOptions = (0, node_url_1.parse)(url);\n        getOptions.maxBodyLength = 60 * 1024 * 1024; // 60mb\n        const destDir = `${(0, node_os_1.tmpdir)()}/chromium-pack`;\n        const extractObj = (0, tar_fs_1.extract)(destDir);\n        follow_redirects_1.https.get(url, (response)=>{\n            response.pipe(extractObj);\n            extractObj.on(\"finish\", ()=>{\n                resolve(destDir);\n            });\n        }).on(\"error\", (err)=>{\n            (0, node_fs_1.unlink)(destDir, (_)=>{\n                reject(err);\n            });\n        });\n    });\nexports.downloadAndExtract = downloadAndExtract;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNwYXJ0aWN1ei9jaHJvbWl1bS9idWlsZC9oZWxwZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELDBCQUEwQixHQUFHQSxrQ0FBa0MsR0FBR0EsNEJBQTRCLEdBQUdBLGtCQUFrQixHQUFHLEtBQUs7QUFDM0gsTUFBTU0sWUFBWUMsbUJBQU9BLENBQUMsd0JBQVM7QUFDbkMsTUFBTUMscUJBQXFCRCxtQkFBT0EsQ0FBQyx3RUFBa0I7QUFDckQsTUFBTUUsWUFBWUYsbUJBQU9BLENBQUMsd0JBQVM7QUFDbkMsTUFBTUcsV0FBV0gsbUJBQU9BLENBQUMsb0RBQVE7QUFDakMsTUFBTUksYUFBYUosbUJBQU9BLENBQUMsMEJBQVU7QUFDckMsTUFBTUYsYUFBYSxDQUFDTztJQUNoQixJQUFJO1FBQ0EsT0FBTyxDQUFDLENBQUMsSUFBSUMsSUFBSUQ7SUFDckIsRUFDQSxPQUFPRSxLQUFLO1FBQ1IsT0FBTztJQUNYO0FBQ0o7QUFDQWQsa0JBQWtCLEdBQUdLO0FBQ3JCOzs7OztDQUtDLEdBQ0QsTUFBTUQsdUJBQXVCO0lBQ3pCLElBQUlXLFFBQVFDLEdBQUcsQ0FBQyxvQkFBb0IsSUFDaENELFFBQVFDLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQ0MsUUFBUSxDQUFDLHdCQUMxQyxDQUFDRixRQUFRQyxHQUFHLENBQUMsb0JBQW9CLENBQUNDLFFBQVEsQ0FBQyxTQUFTO1FBQ3BELE9BQU87SUFDWCxPQUNLLElBQUlGLFFBQVFDLEdBQUcsQ0FBQyx3QkFBd0IsSUFDekNELFFBQVFDLEdBQUcsQ0FBQyx3QkFBd0IsQ0FBQ0MsUUFBUSxDQUFDLGFBQzlDLENBQUNGLFFBQVFDLEdBQUcsQ0FBQyx3QkFBd0IsQ0FBQ0MsUUFBUSxDQUFDLFNBQVM7UUFDeEQsT0FBTztJQUNYO0lBQ0EsT0FBTztBQUNYO0FBQ0FqQiw0QkFBNEIsR0FBR0k7QUFDL0IsTUFBTUQsNkJBQTZCO0lBQy9CLElBQUlZLFFBQVFDLEdBQUcsQ0FBQyxvQkFBb0IsSUFDaENELFFBQVFDLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQ0MsUUFBUSxDQUFDLFNBQVM7UUFDbkQsT0FBTztJQUNYLE9BQ0ssSUFBSUYsUUFBUUMsR0FBRyxDQUFDLHdCQUF3QixJQUN6Q0QsUUFBUUMsR0FBRyxDQUFDLHdCQUF3QixDQUFDQyxRQUFRLENBQUMsU0FBUztRQUN2RCxPQUFPO0lBQ1g7SUFDQSxPQUFPO0FBQ1g7QUFDQWpCLGtDQUFrQyxHQUFHRztBQUNyQyxNQUFNRCxxQkFBcUIsT0FBT2dCLE1BQVEsSUFBSUMsUUFBUSxDQUFDQyxTQUFTQztRQUM1RCxNQUFNQyxhQUFhLENBQUMsR0FBR1gsV0FBV1ksS0FBSyxFQUFFTDtRQUN6Q0ksV0FBV0UsYUFBYSxHQUFHLEtBQUssT0FBTyxNQUFNLE9BQU87UUFDcEQsTUFBTUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxHQUFHaEIsVUFBVWlCLE1BQU0sSUFBSSxjQUFjLENBQUM7UUFDMUQsTUFBTUMsYUFBYSxDQUFDLEdBQUdqQixTQUFTa0IsT0FBTyxFQUFFSDtRQUN6Q2pCLG1CQUFtQnFCLEtBQUssQ0FDbkJDLEdBQUcsQ0FBQ1osS0FBSyxDQUFDYTtZQUNYQSxTQUFTQyxJQUFJLENBQUNMO1lBQ2RBLFdBQVdNLEVBQUUsQ0FBQyxVQUFVO2dCQUNwQmIsUUFBUUs7WUFDWjtRQUNKLEdBQ0tRLEVBQUUsQ0FBQyxTQUFTLENBQUNuQjtZQUNiLElBQUdSLFVBQVU0QixNQUFNLEVBQUVULFNBQVMsQ0FBQ1U7Z0JBQzVCZCxPQUFPUDtZQUNYO1FBQ0o7SUFDSjtBQUNBZCwwQkFBMEIsR0FBR0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pbnZvaWZ5Ly4vbm9kZV9tb2R1bGVzL0BzcGFydGljdXovY2hyb21pdW0vYnVpbGQvaGVscGVyLmpzPzc1ZDMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmRvd25sb2FkQW5kRXh0cmFjdCA9IGV4cG9ydHMuaXNSdW5uaW5nSW5Bd3NMYW1iZGFOb2RlMjAgPSBleHBvcnRzLmlzUnVubmluZ0luQXdzTGFtYmRhID0gZXhwb3J0cy5pc1ZhbGlkVXJsID0gdm9pZCAwO1xuY29uc3Qgbm9kZV9mc18xID0gcmVxdWlyZShcIm5vZGU6ZnNcIik7XG5jb25zdCBmb2xsb3dfcmVkaXJlY3RzXzEgPSByZXF1aXJlKFwiZm9sbG93LXJlZGlyZWN0c1wiKTtcbmNvbnN0IG5vZGVfb3NfMSA9IHJlcXVpcmUoXCJub2RlOm9zXCIpO1xuY29uc3QgdGFyX2ZzXzEgPSByZXF1aXJlKFwidGFyLWZzXCIpO1xuY29uc3Qgbm9kZV91cmxfMSA9IHJlcXVpcmUoXCJub2RlOnVybFwiKTtcbmNvbnN0IGlzVmFsaWRVcmwgPSAoaW5wdXQpID0+IHtcbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gISFuZXcgVVJMKGlucHV0KTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycikge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufTtcbmV4cG9ydHMuaXNWYWxpZFVybCA9IGlzVmFsaWRVcmw7XG4vKipcbiAqIERldGVybWluZXMgaWYgdGhlIHJ1bm5pbmcgaW5zdGFuY2UgaXMgaW5zaWRlIGFuIEFXUyBMYW1iZGEgY29udGFpbmVyLlxuICogQVdTX0VYRUNVVElPTl9FTlYgaXMgZm9yIG5hdGl2ZSBMYW1iZGEgaW5zdGFuY2VzXG4gKiBBV1NfTEFNQkRBX0pTX1JVTlRJTUUgaXMgZm9yIG5ldGxpZnkgaW5zdGFuY2VzXG4gKiBAcmV0dXJucyBib29sZWFuIGluZGljYXRpbmcgaWYgdGhlIHJ1bm5pbmcgaW5zdGFuY2UgaXMgaW5zaWRlIGEgTGFtYmRhIGNvbnRhaW5lclxuICovXG5jb25zdCBpc1J1bm5pbmdJbkF3c0xhbWJkYSA9ICgpID0+IHtcbiAgICBpZiAocHJvY2Vzcy5lbnZbXCJBV1NfRVhFQ1VUSU9OX0VOVlwiXSAmJlxuICAgICAgICBwcm9jZXNzLmVudltcIkFXU19FWEVDVVRJT05fRU5WXCJdLmluY2x1ZGVzKFwiQVdTX0xhbWJkYV9ub2RlanNcIikgJiZcbiAgICAgICAgIXByb2Nlc3MuZW52W1wiQVdTX0VYRUNVVElPTl9FTlZcIl0uaW5jbHVkZXMoXCIyMC54XCIpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBlbHNlIGlmIChwcm9jZXNzLmVudltcIkFXU19MQU1CREFfSlNfUlVOVElNRVwiXSAmJlxuICAgICAgICBwcm9jZXNzLmVudltcIkFXU19MQU1CREFfSlNfUlVOVElNRVwiXS5pbmNsdWRlcyhcIm5vZGVqc1wiKSAmJlxuICAgICAgICAhcHJvY2Vzcy5lbnZbXCJBV1NfTEFNQkRBX0pTX1JVTlRJTUVcIl0uaW5jbHVkZXMoXCIyMC54XCIpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59O1xuZXhwb3J0cy5pc1J1bm5pbmdJbkF3c0xhbWJkYSA9IGlzUnVubmluZ0luQXdzTGFtYmRhO1xuY29uc3QgaXNSdW5uaW5nSW5Bd3NMYW1iZGFOb2RlMjAgPSAoKSA9PiB7XG4gICAgaWYgKHByb2Nlc3MuZW52W1wiQVdTX0VYRUNVVElPTl9FTlZcIl0gJiZcbiAgICAgICAgcHJvY2Vzcy5lbnZbXCJBV1NfRVhFQ1VUSU9OX0VOVlwiXS5pbmNsdWRlcyhcIjIwLnhcIikpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGVsc2UgaWYgKHByb2Nlc3MuZW52W1wiQVdTX0xBTUJEQV9KU19SVU5USU1FXCJdICYmXG4gICAgICAgIHByb2Nlc3MuZW52W1wiQVdTX0xBTUJEQV9KU19SVU5USU1FXCJdLmluY2x1ZGVzKFwiMjAueFwiKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufTtcbmV4cG9ydHMuaXNSdW5uaW5nSW5Bd3NMYW1iZGFOb2RlMjAgPSBpc1J1bm5pbmdJbkF3c0xhbWJkYU5vZGUyMDtcbmNvbnN0IGRvd25sb2FkQW5kRXh0cmFjdCA9IGFzeW5jICh1cmwpID0+IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBjb25zdCBnZXRPcHRpb25zID0gKDAsIG5vZGVfdXJsXzEucGFyc2UpKHVybCk7XG4gICAgZ2V0T3B0aW9ucy5tYXhCb2R5TGVuZ3RoID0gNjAgKiAxMDI0ICogMTAyNDsgLy8gNjBtYlxuICAgIGNvbnN0IGRlc3REaXIgPSBgJHsoMCwgbm9kZV9vc18xLnRtcGRpcikoKX0vY2hyb21pdW0tcGFja2A7XG4gICAgY29uc3QgZXh0cmFjdE9iaiA9ICgwLCB0YXJfZnNfMS5leHRyYWN0KShkZXN0RGlyKTtcbiAgICBmb2xsb3dfcmVkaXJlY3RzXzEuaHR0cHNcbiAgICAgICAgLmdldCh1cmwsIChyZXNwb25zZSkgPT4ge1xuICAgICAgICByZXNwb25zZS5waXBlKGV4dHJhY3RPYmopO1xuICAgICAgICBleHRyYWN0T2JqLm9uKFwiZmluaXNoXCIsICgpID0+IHtcbiAgICAgICAgICAgIHJlc29sdmUoZGVzdERpcik7XG4gICAgICAgIH0pO1xuICAgIH0pXG4gICAgICAgIC5vbihcImVycm9yXCIsIChlcnIpID0+IHtcbiAgICAgICAgKDAsIG5vZGVfZnNfMS51bmxpbmspKGRlc3REaXIsIChfKSA9PiB7XG4gICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59KTtcbmV4cG9ydHMuZG93bmxvYWRBbmRFeHRyYWN0ID0gZG93bmxvYWRBbmRFeHRyYWN0O1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZG93bmxvYWRBbmRFeHRyYWN0IiwiaXNSdW5uaW5nSW5Bd3NMYW1iZGFOb2RlMjAiLCJpc1J1bm5pbmdJbkF3c0xhbWJkYSIsImlzVmFsaWRVcmwiLCJub2RlX2ZzXzEiLCJyZXF1aXJlIiwiZm9sbG93X3JlZGlyZWN0c18xIiwibm9kZV9vc18xIiwidGFyX2ZzXzEiLCJub2RlX3VybF8xIiwiaW5wdXQiLCJVUkwiLCJlcnIiLCJwcm9jZXNzIiwiZW52IiwiaW5jbHVkZXMiLCJ1cmwiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImdldE9wdGlvbnMiLCJwYXJzZSIsIm1heEJvZHlMZW5ndGgiLCJkZXN0RGlyIiwidG1wZGlyIiwiZXh0cmFjdE9iaiIsImV4dHJhY3QiLCJodHRwcyIsImdldCIsInJlc3BvbnNlIiwicGlwZSIsIm9uIiwidW5saW5rIiwiXyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@sparticuz/chromium/build/helper.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@sparticuz/chromium/build/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/@sparticuz/chromium/build/index.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nconst node_fs_1 = __webpack_require__(/*! node:fs */ \"node:fs\");\nconst follow_redirects_1 = __webpack_require__(/*! follow-redirects */ \"(rsc)/./node_modules/follow-redirects/index.js\");\nconst lambdafs_1 = __importDefault(__webpack_require__(/*! ./lambdafs */ \"(rsc)/./node_modules/@sparticuz/chromium/build/lambdafs.js\"));\nconst node_path_1 = __webpack_require__(/*! node:path */ \"node:path\");\nconst node_url_1 = __webpack_require__(/*! node:url */ \"node:url\");\nconst helper_1 = __webpack_require__(/*! ./helper */ \"(rsc)/./node_modules/@sparticuz/chromium/build/helper.js\");\nif ((0, helper_1.isRunningInAwsLambda)()) {\n    if (process.env[\"FONTCONFIG_PATH\"] === undefined) {\n        process.env[\"FONTCONFIG_PATH\"] = \"/tmp/fonts\";\n    }\n    if (process.env[\"LD_LIBRARY_PATH\"] === undefined) {\n        process.env[\"LD_LIBRARY_PATH\"] = \"/tmp/al2/lib\";\n    } else if (process.env[\"LD_LIBRARY_PATH\"].startsWith(\"/tmp/al2/lib\") !== true) {\n        process.env[\"LD_LIBRARY_PATH\"] = [\n            ...new Set([\n                \"/tmp/al2/lib\",\n                ...process.env[\"LD_LIBRARY_PATH\"].split(\":\")\n            ])\n        ].join(\":\");\n    }\n}\nif ((0, helper_1.isRunningInAwsLambdaNode20)()) {\n    if (process.env[\"FONTCONFIG_PATH\"] === undefined) {\n        process.env[\"FONTCONFIG_PATH\"] = \"/tmp/fonts\";\n    }\n    if (process.env[\"LD_LIBRARY_PATH\"] === undefined) {\n        process.env[\"LD_LIBRARY_PATH\"] = \"/tmp/al2023/lib\";\n    } else if (process.env[\"LD_LIBRARY_PATH\"].startsWith(\"/tmp/al2023/lib\") !== true) {\n        process.env[\"LD_LIBRARY_PATH\"] = [\n            ...new Set([\n                \"/tmp/al2023/lib\",\n                ...process.env[\"LD_LIBRARY_PATH\"].split(\":\")\n            ])\n        ].join(\":\");\n    }\n}\nclass Chromium {\n    static{\n        /**\n     * Determines the headless mode that chromium will run at\n     * https://developer.chrome.com/articles/new-headless/#try-out-the-new-headless\n     * @values true or \"new\"\n     */ this.headlessMode = \"shell\";\n    }\n    static{\n        /**\n     * If true, the graphics stack and webgl is enabled,\n     * If false, webgl will be disabled.\n     * (If false, the swiftshader.tar.br file will also not extract)\n     */ this.graphicsMode = true;\n    }\n    /**\n     * Downloads or symlinks a custom font and returns its basename, patching the environment so that Chromium can find it.\n     */ static font(input) {\n        if (process.env[\"HOME\"] === undefined) {\n            process.env[\"HOME\"] = \"/tmp\";\n        }\n        if ((0, node_fs_1.existsSync)(`${process.env[\"HOME\"]}/.fonts`) !== true) {\n            (0, node_fs_1.mkdirSync)(`${process.env[\"HOME\"]}/.fonts`);\n        }\n        return new Promise((resolve, reject)=>{\n            if (/^https?:[/][/]/i.test(input) !== true) {\n                input = `file://${input}`;\n            }\n            const url = new node_url_1.URL(input);\n            const output = `${process.env[\"HOME\"]}/.fonts/${url.pathname.split(\"/\").pop()}`;\n            if ((0, node_fs_1.existsSync)(output) === true) {\n                return resolve(output.split(\"/\").pop());\n            }\n            if (url.protocol === \"file:\") {\n                (0, node_fs_1.access)(url.pathname, (error)=>{\n                    if (error != null) {\n                        return reject(error);\n                    }\n                    (0, node_fs_1.symlink)(url.pathname, output, (error)=>{\n                        return error != null ? reject(error) : resolve(url.pathname.split(\"/\").pop());\n                    });\n                });\n            } else {\n                follow_redirects_1.https.get(input, (response)=>{\n                    if (response.statusCode !== 200) {\n                        return reject(`Unexpected status code: ${response.statusCode}.`);\n                    }\n                    const stream = (0, node_fs_1.createWriteStream)(output);\n                    stream.once(\"error\", (error)=>{\n                        return reject(error);\n                    });\n                    response.on(\"data\", (chunk)=>{\n                        stream.write(chunk);\n                    });\n                    response.once(\"end\", ()=>{\n                        stream.end(()=>{\n                            return resolve(url.pathname.split(\"/\").pop());\n                        });\n                    });\n                });\n            }\n        });\n    }\n    /**\n     * Returns a list of additional Chromium flags recommended for serverless environments.\n     * The canonical list of flags can be found on https://peter.sh/experiments/chromium-command-line-switches/.\n     */ static get args() {\n        /**\n         * These are the default args in puppeteer.\n         * https://github.com/puppeteer/puppeteer/blob/3a31070d054fa3cd8116ca31c578807ed8d6f987/packages/puppeteer-core/src/node/ChromeLauncher.ts#L185\n         */ const puppeteerFlags = [\n            \"--allow-pre-commit-input\",\n            \"--disable-background-networking\",\n            \"--disable-background-timer-throttling\",\n            \"--disable-backgrounding-occluded-windows\",\n            \"--disable-breakpad\",\n            \"--disable-client-side-phishing-detection\",\n            \"--disable-component-extensions-with-background-pages\",\n            \"--disable-component-update\",\n            \"--disable-default-apps\",\n            \"--disable-dev-shm-usage\",\n            \"--disable-extensions\",\n            \"--disable-hang-monitor\",\n            \"--disable-ipc-flooding-protection\",\n            \"--disable-popup-blocking\",\n            \"--disable-prompt-on-repost\",\n            \"--disable-renderer-backgrounding\",\n            \"--disable-sync\",\n            \"--enable-automation\",\n            // TODO(sadym): remove '--enable-blink-features=IdleDetection' once\n            // IdleDetection is turned on by default.\n            \"--enable-blink-features=IdleDetection\",\n            \"--export-tagged-pdf\",\n            \"--force-color-profile=srgb\",\n            \"--metrics-recording-only\",\n            \"--no-first-run\",\n            \"--password-store=basic\",\n            \"--use-mock-keychain\"\n        ];\n        const puppeteerDisableFeatures = [\n            \"Translate\",\n            \"BackForwardCache\",\n            // AcceptCHFrame disabled because of crbug.com/1348106.\n            \"AcceptCHFrame\",\n            \"MediaRouter\",\n            \"OptimizationHints\"\n        ];\n        const puppeteerEnableFeatures = [\n            \"NetworkServiceInProcess2\"\n        ];\n        const chromiumFlags = [\n            \"--disable-domain-reliability\",\n            \"--disable-print-preview\",\n            \"--disable-speech-api\",\n            \"--disk-cache-size=33554432\",\n            \"--mute-audio\",\n            \"--no-default-browser-check\",\n            \"--no-pings\",\n            \"--single-process\",\n            \"--font-render-hinting=none\"\n        ];\n        const chromiumDisableFeatures = [\n            \"AudioServiceOutOfProcess\",\n            \"IsolateOrigins\",\n            \"site-per-process\"\n        ];\n        const chromiumEnableFeatures = [\n            \"SharedArrayBuffer\"\n        ];\n        const graphicsFlags = [\n            \"--hide-scrollbars\",\n            \"--ignore-gpu-blocklist\",\n            \"--in-process-gpu\",\n            \"--window-size=1920,1080\"\n        ];\n        // https://chromium.googlesource.com/chromium/src/+/main/docs/gpu/swiftshader.md\n        // Blocked by https://github.com/Sparticuz/chromium/issues/247\n        //this.graphics\n        //  ? graphicsFlags.push(\"--use-gl=angle\", \"--use-angle=swiftshader\")\n        //  : graphicsFlags.push(\"--disable-webgl\");\n        graphicsFlags.push(\"--use-gl=angle\", \"--use-angle=swiftshader\");\n        const insecureFlags = [\n            \"--allow-running-insecure-content\",\n            \"--disable-setuid-sandbox\",\n            \"--disable-site-isolation-trials\",\n            \"--disable-web-security\",\n            \"--no-sandbox\",\n            \"--no-zygote\"\n        ];\n        const headlessFlags = [\n            this.headless === \"shell\" ? \"--headless='shell'\" : \"--headless\"\n        ];\n        return [\n            ...puppeteerFlags,\n            ...chromiumFlags,\n            `--disable-features=${[\n                ...puppeteerDisableFeatures,\n                ...chromiumDisableFeatures\n            ].join(\",\")}`,\n            `--enable-features=${[\n                ...puppeteerEnableFeatures,\n                ...chromiumEnableFeatures\n            ].join(\",\")}`,\n            ...graphicsFlags,\n            ...insecureFlags,\n            ...headlessFlags\n        ];\n    }\n    /**\n     * Returns sensible default viewport settings for serverless environments.\n     */ static get defaultViewport() {\n        return {\n            deviceScaleFactor: 1,\n            hasTouch: false,\n            height: 1080,\n            isLandscape: true,\n            isMobile: false,\n            width: 1920\n        };\n    }\n    /**\n     * Inflates the included version of Chromium\n     * @param input The location of the `bin` folder\n     * @returns The path to the `chromium` binary\n     */ static async executablePath(input) {\n        /**\n         * If the `chromium` binary already exists in /tmp/chromium, return it.\n         */ if ((0, node_fs_1.existsSync)(\"/tmp/chromium\") === true) {\n            return Promise.resolve(\"/tmp/chromium\");\n        }\n        /**\n         * If input is a valid URL, download and extract the file. It will extract to /tmp/chromium-pack\n         * and executablePath will be recursively called on that location, which will then extract\n         * the brotli files to the correct locations\n         */ if (input && (0, helper_1.isValidUrl)(input)) {\n            return this.executablePath(await (0, helper_1.downloadAndExtract)(input));\n        }\n        /**\n         * If input is defined, use that as the location of the brotli files,\n         * otherwise, the default location is ../bin.\n         * A custom location is needed for workflows that using custom packaging.\n         */ input ??= (0, node_path_1.join)(__dirname, \"..\", \"bin\");\n        /**\n         * If the input directory doesn't exist, throw an error.\n         */ if (!(0, node_fs_1.existsSync)(input)) {\n            throw new Error(`The input directory \"${input}\" does not exist.`);\n        }\n        // Extract the required files\n        const promises = [\n            lambdafs_1.default.inflate(`${input}/chromium.br`),\n            lambdafs_1.default.inflate(`${input}/fonts.tar.br`)\n        ];\n        if (this.graphics) {\n            // Only inflate graphics stack if needed\n            promises.push(lambdafs_1.default.inflate(`${input}/swiftshader.tar.br`));\n        }\n        if ((0, helper_1.isRunningInAwsLambda)()) {\n            // If running in AWS Lambda, extract more required files\n            promises.push(lambdafs_1.default.inflate(`${input}/al2.tar.br`));\n        }\n        if ((0, helper_1.isRunningInAwsLambdaNode20)()) {\n            promises.push(lambdafs_1.default.inflate(`${input}/al2023.tar.br`));\n        }\n        // Await all extractions\n        const result = await Promise.all(promises);\n        // Returns the first result of the promise, which is the location of the `chromium` binary\n        return result.shift();\n    }\n    /**\n     * Returns the headless mode.\n     * \"shell\" means the 'old' (legacy, chromium < 112) headless mode.\n     * `true` means the 'new' headless mode.\n     * https://developer.chrome.com/articles/new-headless/#try-out-the-new-headless\n     * @returns true | \"shell\"\n     */ static get headless() {\n        return this.headlessMode;\n    }\n    /**\n     * Sets the headless mode.\n     * \"shell\" means the 'old' (legacy, chromium < 112) headless mode.\n     * `true` means the 'new' headless mode.\n     * https://developer.chrome.com/articles/new-headless/#try-out-the-new-headless\n     * @default \"shell\"\n     */ static set setHeadlessMode(value) {\n        if (typeof value === \"string\" && value !== \"shell\" || typeof value === \"boolean\" && value !== true) {\n            throw new Error(`Headless mode must be either \\`true\\` or 'shell', you entered '${value}'`);\n        }\n        this.headlessMode = value;\n    }\n    /**\n     * Returns whether the graphics stack is enabled or disabled\n     * @returns boolean\n     */ static get graphics() {\n        return this.graphicsMode;\n    }\n    /**\n     * Sets whether the graphics stack is enabled or disabled.\n     * @param true means the stack is enabled. WebGL will work.\n     * @param false means that the stack is disabled. WebGL will not work.\n     * `false` will also skip the extract of the graphics driver, saving about a second during initial extract\n     * @default true\n     */ static set setGraphicsMode(value) {\n        if (typeof value !== \"boolean\") {\n            throw new Error(`Graphics mode must be a boolean, you entered '${value}'`);\n        }\n        this.graphicsMode = value;\n    }\n}\nmodule.exports = Chromium;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@sparticuz/chromium/build/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@sparticuz/chromium/build/lambdafs.js":
/*!************************************************************!*\
  !*** ./node_modules/@sparticuz/chromium/build/lambdafs.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst node_fs_1 = __webpack_require__(/*! node:fs */ \"node:fs\");\nconst node_os_1 = __webpack_require__(/*! node:os */ \"node:os\");\nconst node_path_1 = __webpack_require__(/*! node:path */ \"node:path\");\nconst tar_fs_1 = __webpack_require__(/*! tar-fs */ \"(rsc)/./node_modules/tar-fs/index.js\");\nconst node_zlib_1 = __webpack_require__(/*! node:zlib */ \"node:zlib\");\nclass LambdaFS {\n    /**\n     * Decompresses a (tarballed) Brotli or Gzip compressed file and returns the path to the decompressed file/folder.\n     *\n     * @param filePath Path of the file to decompress.\n     */ static inflate(filePath) {\n        const output = filePath.includes(\"swiftshader\") ? (0, node_os_1.tmpdir)() : (0, node_path_1.join)((0, node_os_1.tmpdir)(), (0, node_path_1.basename)(filePath).replace(/[.](?:t(?:ar(?:[.](?:br|gz))?|br|gz)|br|gz)$/i, \"\"));\n        return new Promise((resolve, reject)=>{\n            if (filePath.includes(\"swiftshader\")) {\n                if ((0, node_fs_1.existsSync)(`${output}/libGLESv2.so`)) {\n                    return resolve(output);\n                }\n            } else {\n                if ((0, node_fs_1.existsSync)(output) === true) {\n                    return resolve(output);\n                }\n            }\n            let source = (0, node_fs_1.createReadStream)(filePath, {\n                highWaterMark: 2 ** 23\n            });\n            let target = null;\n            if (/[.](?:t(?:ar(?:[.](?:br|gz))?|br|gz))$/i.test(filePath) === true) {\n                target = (0, tar_fs_1.extract)(output);\n                target.once(\"finish\", ()=>{\n                    return resolve(output);\n                });\n            } else {\n                target = (0, node_fs_1.createWriteStream)(output, {\n                    mode: 448\n                });\n            }\n            source.once(\"error\", (error)=>{\n                return reject(error);\n            });\n            target.once(\"error\", (error)=>{\n                return reject(error);\n            });\n            target.once(\"close\", ()=>{\n                return resolve(output);\n            });\n            if (/(?:br|gz)$/i.test(filePath) === true) {\n                source.pipe(/br$/i.test(filePath) ? (0, node_zlib_1.createBrotliDecompress)({\n                    chunkSize: 2 ** 21\n                }) : (0, node_zlib_1.createUnzip)({\n                    chunkSize: 2 ** 21\n                })).pipe(target);\n            } else {\n                source.pipe(target);\n            }\n        });\n    }\n}\nexports[\"default\"] = LambdaFS;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNwYXJ0aWN1ei9jaHJvbWl1bS9idWlsZC9sYW1iZGFmcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3RCxNQUFNQyxZQUFZQyxtQkFBT0EsQ0FBQyx3QkFBUztBQUNuQyxNQUFNQyxZQUFZRCxtQkFBT0EsQ0FBQyx3QkFBUztBQUNuQyxNQUFNRSxjQUFjRixtQkFBT0EsQ0FBQyw0QkFBVztBQUN2QyxNQUFNRyxXQUFXSCxtQkFBT0EsQ0FBQyxvREFBUTtBQUNqQyxNQUFNSSxjQUFjSixtQkFBT0EsQ0FBQyw0QkFBVztBQUN2QyxNQUFNSztJQUNGOzs7O0tBSUMsR0FDRCxPQUFPQyxRQUFRQyxRQUFRLEVBQUU7UUFDckIsTUFBTUMsU0FBU0QsU0FBU0UsUUFBUSxDQUFDLGlCQUMzQixDQUFDLEdBQUdSLFVBQVVTLE1BQU0sTUFDcEIsQ0FBQyxHQUFHUixZQUFZUyxJQUFJLEVBQUUsQ0FBQyxHQUFHVixVQUFVUyxNQUFNLEtBQUssQ0FBQyxHQUFHUixZQUFZVSxRQUFRLEVBQUVMLFVBQVVNLE9BQU8sQ0FBQyxpREFBaUQ7UUFDbEosT0FBTyxJQUFJQyxRQUFRLENBQUNDLFNBQVNDO1lBQ3pCLElBQUlULFNBQVNFLFFBQVEsQ0FBQyxnQkFBZ0I7Z0JBQ2xDLElBQUksQ0FBQyxHQUFHVixVQUFVa0IsVUFBVSxFQUFFLENBQUMsRUFBRVQsT0FBTyxhQUFhLENBQUMsR0FBRztvQkFDckQsT0FBT08sUUFBUVA7Z0JBQ25CO1lBQ0osT0FDSztnQkFDRCxJQUFJLENBQUMsR0FBR1QsVUFBVWtCLFVBQVUsRUFBRVQsWUFBWSxNQUFNO29CQUM1QyxPQUFPTyxRQUFRUDtnQkFDbkI7WUFDSjtZQUNBLElBQUlVLFNBQVMsQ0FBQyxHQUFHbkIsVUFBVW9CLGdCQUFnQixFQUFFWixVQUFVO2dCQUFFYSxlQUFlLEtBQUs7WUFBRztZQUNoRixJQUFJQyxTQUFTO1lBQ2IsSUFBSSwwQ0FBMENDLElBQUksQ0FBQ2YsY0FBYyxNQUFNO2dCQUNuRWMsU0FBUyxDQUFDLEdBQUdsQixTQUFTb0IsT0FBTyxFQUFFZjtnQkFDL0JhLE9BQU9HLElBQUksQ0FBQyxVQUFVO29CQUNsQixPQUFPVCxRQUFRUDtnQkFDbkI7WUFDSixPQUNLO2dCQUNEYSxTQUFTLENBQUMsR0FBR3RCLFVBQVUwQixpQkFBaUIsRUFBRWpCLFFBQVE7b0JBQUVrQixNQUFNO2dCQUFNO1lBQ3BFO1lBQ0FSLE9BQU9NLElBQUksQ0FBQyxTQUFTLENBQUNHO2dCQUNsQixPQUFPWCxPQUFPVztZQUNsQjtZQUNBTixPQUFPRyxJQUFJLENBQUMsU0FBUyxDQUFDRztnQkFDbEIsT0FBT1gsT0FBT1c7WUFDbEI7WUFDQU4sT0FBT0csSUFBSSxDQUFDLFNBQVM7Z0JBQ2pCLE9BQU9ULFFBQVFQO1lBQ25CO1lBQ0EsSUFBSSxjQUFjYyxJQUFJLENBQUNmLGNBQWMsTUFBTTtnQkFDdkNXLE9BQ0tVLElBQUksQ0FBQyxPQUFPTixJQUFJLENBQUNmLFlBQ2hCLENBQUMsR0FBR0gsWUFBWXlCLHNCQUFzQixFQUFFO29CQUFFQyxXQUFXLEtBQUs7Z0JBQUcsS0FDN0QsQ0FBQyxHQUFHMUIsWUFBWTJCLFdBQVcsRUFBRTtvQkFBRUQsV0FBVyxLQUFLO2dCQUFHLElBQ25ERixJQUFJLENBQUNQO1lBQ2QsT0FDSztnQkFDREgsT0FBT1UsSUFBSSxDQUFDUDtZQUNoQjtRQUNKO0lBQ0o7QUFDSjtBQUNBeEIsa0JBQWUsR0FBR1EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pbnZvaWZ5Ly4vbm9kZV9tb2R1bGVzL0BzcGFydGljdXovY2hyb21pdW0vYnVpbGQvbGFtYmRhZnMuanM/NzQzNSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IG5vZGVfZnNfMSA9IHJlcXVpcmUoXCJub2RlOmZzXCIpO1xuY29uc3Qgbm9kZV9vc18xID0gcmVxdWlyZShcIm5vZGU6b3NcIik7XG5jb25zdCBub2RlX3BhdGhfMSA9IHJlcXVpcmUoXCJub2RlOnBhdGhcIik7XG5jb25zdCB0YXJfZnNfMSA9IHJlcXVpcmUoXCJ0YXItZnNcIik7XG5jb25zdCBub2RlX3psaWJfMSA9IHJlcXVpcmUoXCJub2RlOnpsaWJcIik7XG5jbGFzcyBMYW1iZGFGUyB7XG4gICAgLyoqXG4gICAgICogRGVjb21wcmVzc2VzIGEgKHRhcmJhbGxlZCkgQnJvdGxpIG9yIEd6aXAgY29tcHJlc3NlZCBmaWxlIGFuZCByZXR1cm5zIHRoZSBwYXRoIHRvIHRoZSBkZWNvbXByZXNzZWQgZmlsZS9mb2xkZXIuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZmlsZVBhdGggUGF0aCBvZiB0aGUgZmlsZSB0byBkZWNvbXByZXNzLlxuICAgICAqL1xuICAgIHN0YXRpYyBpbmZsYXRlKGZpbGVQYXRoKSB7XG4gICAgICAgIGNvbnN0IG91dHB1dCA9IGZpbGVQYXRoLmluY2x1ZGVzKFwic3dpZnRzaGFkZXJcIilcbiAgICAgICAgICAgID8gKDAsIG5vZGVfb3NfMS50bXBkaXIpKClcbiAgICAgICAgICAgIDogKDAsIG5vZGVfcGF0aF8xLmpvaW4pKCgwLCBub2RlX29zXzEudG1wZGlyKSgpLCAoMCwgbm9kZV9wYXRoXzEuYmFzZW5hbWUpKGZpbGVQYXRoKS5yZXBsYWNlKC9bLl0oPzp0KD86YXIoPzpbLl0oPzpicnxneikpP3xicnxneil8YnJ8Z3opJC9pLCBcIlwiKSk7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICBpZiAoZmlsZVBhdGguaW5jbHVkZXMoXCJzd2lmdHNoYWRlclwiKSkge1xuICAgICAgICAgICAgICAgIGlmICgoMCwgbm9kZV9mc18xLmV4aXN0c1N5bmMpKGAke291dHB1dH0vbGliR0xFU3YyLnNvYCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUob3V0cHV0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoKDAsIG5vZGVfZnNfMS5leGlzdHNTeW5jKShvdXRwdXQpID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKG91dHB1dCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IHNvdXJjZSA9ICgwLCBub2RlX2ZzXzEuY3JlYXRlUmVhZFN0cmVhbSkoZmlsZVBhdGgsIHsgaGlnaFdhdGVyTWFyazogMiAqKiAyMyB9KTtcbiAgICAgICAgICAgIGxldCB0YXJnZXQgPSBudWxsO1xuICAgICAgICAgICAgaWYgKC9bLl0oPzp0KD86YXIoPzpbLl0oPzpicnxneikpP3xicnxneikpJC9pLnRlc3QoZmlsZVBhdGgpID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0ID0gKDAsIHRhcl9mc18xLmV4dHJhY3QpKG91dHB1dCk7XG4gICAgICAgICAgICAgICAgdGFyZ2V0Lm9uY2UoXCJmaW5pc2hcIiwgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZShvdXRwdXQpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0ID0gKDAsIG5vZGVfZnNfMS5jcmVhdGVXcml0ZVN0cmVhbSkob3V0cHV0LCB7IG1vZGU6IDBvNzAwIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc291cmNlLm9uY2UoXCJlcnJvclwiLCAoZXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGFyZ2V0Lm9uY2UoXCJlcnJvclwiLCAoZXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGFyZ2V0Lm9uY2UoXCJjbG9zZVwiLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUob3V0cHV0KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKC8oPzpicnxneikkL2kudGVzdChmaWxlUGF0aCkgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBzb3VyY2VcbiAgICAgICAgICAgICAgICAgICAgLnBpcGUoL2JyJC9pLnRlc3QoZmlsZVBhdGgpXG4gICAgICAgICAgICAgICAgICAgID8gKDAsIG5vZGVfemxpYl8xLmNyZWF0ZUJyb3RsaURlY29tcHJlc3MpKHsgY2h1bmtTaXplOiAyICoqIDIxIH0pXG4gICAgICAgICAgICAgICAgICAgIDogKDAsIG5vZGVfemxpYl8xLmNyZWF0ZVVuemlwKSh7IGNodW5rU2l6ZTogMiAqKiAyMSB9KSlcbiAgICAgICAgICAgICAgICAgICAgLnBpcGUodGFyZ2V0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHNvdXJjZS5waXBlKHRhcmdldCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmV4cG9ydHMuZGVmYXVsdCA9IExhbWJkYUZTO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwibm9kZV9mc18xIiwicmVxdWlyZSIsIm5vZGVfb3NfMSIsIm5vZGVfcGF0aF8xIiwidGFyX2ZzXzEiLCJub2RlX3psaWJfMSIsIkxhbWJkYUZTIiwiaW5mbGF0ZSIsImZpbGVQYXRoIiwib3V0cHV0IiwiaW5jbHVkZXMiLCJ0bXBkaXIiLCJqb2luIiwiYmFzZW5hbWUiLCJyZXBsYWNlIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJleGlzdHNTeW5jIiwic291cmNlIiwiY3JlYXRlUmVhZFN0cmVhbSIsImhpZ2hXYXRlck1hcmsiLCJ0YXJnZXQiLCJ0ZXN0IiwiZXh0cmFjdCIsIm9uY2UiLCJjcmVhdGVXcml0ZVN0cmVhbSIsIm1vZGUiLCJlcnJvciIsInBpcGUiLCJjcmVhdGVCcm90bGlEZWNvbXByZXNzIiwiY2h1bmtTaXplIiwiY3JlYXRlVW56aXAiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@sparticuz/chromium/build/lambdafs.js\n");

/***/ })

};
;