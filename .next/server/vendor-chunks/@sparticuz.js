"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@sparticuz";
exports.ids = ["vendor-chunks/@sparticuz"];
exports.modules = {

/***/ "(rsc)/./node_modules/@sparticuz/chromium-min/build/helper.js":
/*!**************************************************************!*\
  !*** ./node_modules/@sparticuz/chromium-min/build/helper.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.downloadAndExtract = exports.isRunningInAwsLambdaNode20 = exports.isRunningInAwsLambda = exports.isValidUrl = exports.setupLambdaEnvironment = void 0;\nconst node_fs_1 = __webpack_require__(/*! node:fs */ \"node:fs\");\nconst follow_redirects_1 = __webpack_require__(/*! follow-redirects */ \"(rsc)/./node_modules/follow-redirects/index.js\");\nconst node_os_1 = __webpack_require__(/*! node:os */ \"node:os\");\nconst tar_fs_1 = __webpack_require__(/*! tar-fs */ \"(rsc)/./node_modules/tar-fs/index.js\");\n/**\n * Adds the proper folders to the environment\n * @param baseLibPath the path to this packages lib folder\n */ const setupLambdaEnvironment = (baseLibPath)=>{\n    // If the FONTCONFIG_PATH is not set, set it to /tmp/fonts\n    process.env[\"FONTCONFIG_PATH\"] ??= \"/tmp/fonts\";\n    // If LD_LIBRARY_PATH is undefined, set it to baseLibPath, otherwise, add it\n    if (process.env[\"LD_LIBRARY_PATH\"] === undefined) {\n        process.env[\"LD_LIBRARY_PATH\"] = baseLibPath;\n    } else if (process.env[\"LD_LIBRARY_PATH\"].startsWith(baseLibPath) !== true) {\n        process.env[\"LD_LIBRARY_PATH\"] = [\n            baseLibPath,\n            ...new Set(process.env[\"LD_LIBRARY_PATH\"].split(\":\"))\n        ].join(\":\");\n    }\n};\nexports.setupLambdaEnvironment = setupLambdaEnvironment;\n/**\n * Determines if the input is a valid URL\n * @param input the input to check\n * @returns boolean indicating if the input is a valid URL\n */ const isValidUrl = (input)=>{\n    try {\n        return !!new URL(input);\n    } catch  {\n        return false;\n    }\n};\nexports.isValidUrl = isValidUrl;\n/**\n * Determines if the running instance is inside an AWS Lambda container,\n * and the nodejs version is less than v20. This is to target AL2 instances\n * AWS_EXECUTION_ENV is for native Lambda instances\n * AWS_LAMBDA_JS_RUNTIME is for netlify instances\n * VERCEL for Vercel Functions (Node 18 enables an AL2-compatible environment)\n * @returns boolean indicating if the running instance is inside a Lambda container\n */ const isRunningInAwsLambda = (nodeMajorVersion)=>{\n    if (process.env[\"AWS_EXECUTION_ENV\"] && process.env[\"AWS_EXECUTION_ENV\"].includes(\"AWS_Lambda_nodejs\") && !process.env[\"AWS_EXECUTION_ENV\"].includes(\"20.x\") && !process.env[\"AWS_EXECUTION_ENV\"].includes(\"22.x\")) {\n        return true;\n    } else if (process.env[\"AWS_LAMBDA_JS_RUNTIME\"] && process.env[\"AWS_LAMBDA_JS_RUNTIME\"].includes(\"nodejs\") && !process.env[\"AWS_LAMBDA_JS_RUNTIME\"].includes(\"20.x\") && !process.env[\"AWS_LAMBDA_JS_RUNTIME\"].includes(\"22.x\")) {\n        return true;\n    } else if (process.env[\"VERCEL\"] && nodeMajorVersion == 18) {\n        return true;\n    }\n    return false;\n};\nexports.isRunningInAwsLambda = isRunningInAwsLambda;\n/**\n * Determines if the running instance is inside an AWS Lambda container,\n * and the nodejs version is 20. This is to target AL2023 instances\n * AWS_EXECUTION_ENV is for native Lambda instances\n * AWS_LAMBDA_JS_RUNTIME is for netlify instances\n * CODEBUILD_BUILD_IMAGE is for CodeBuild instances\n * VERCEL is for Vercel Functions (Node 20 or later enables an AL2023-compatible environment).\n * @returns boolean indicating if the running instance is inside a Lambda container with nodejs20\n */ const isRunningInAwsLambdaNode20 = (nodeMajorVersion)=>{\n    if (process.env[\"AWS_EXECUTION_ENV\"] && process.env[\"AWS_EXECUTION_ENV\"].includes(\"20.x\") || process.env[\"AWS_EXECUTION_ENV\"] && process.env[\"AWS_EXECUTION_ENV\"].includes(\"22.x\") || process.env[\"AWS_LAMBDA_JS_RUNTIME\"] && process.env[\"AWS_LAMBDA_JS_RUNTIME\"].includes(\"20.x\") || process.env[\"AWS_LAMBDA_JS_RUNTIME\"] && process.env[\"AWS_LAMBDA_JS_RUNTIME\"].includes(\"22.x\") || process.env[\"CODEBUILD_BUILD_IMAGE\"] && process.env[\"CODEBUILD_BUILD_IMAGE\"].includes(\"nodejs20\") || process.env[\"CODEBUILD_BUILD_IMAGE\"] && process.env[\"CODEBUILD_BUILD_IMAGE\"].includes(\"nodejs22\") || process.env[\"VERCEL\"] && nodeMajorVersion >= 20) {\n        return true;\n    }\n    return false;\n};\nexports.isRunningInAwsLambdaNode20 = isRunningInAwsLambdaNode20;\nconst downloadAndExtract = async (url)=>new Promise((resolve, reject)=>{\n        const getOptions = new URL(url);\n        getOptions.maxBodyLength = 60 * 1024 * 1024; // 60mb\n        const destDir = `${(0, node_os_1.tmpdir)()}/chromium-pack`;\n        const extractObj = (0, tar_fs_1.extract)(destDir);\n        follow_redirects_1.https.get(url, (response)=>{\n            response.pipe(extractObj);\n            extractObj.on(\"finish\", ()=>{\n                resolve(destDir);\n            });\n        }).on(\"error\", (err)=>{\n            (0, node_fs_1.unlink)(destDir, (_)=>{\n                reject(err);\n            });\n        });\n    });\nexports.downloadAndExtract = downloadAndExtract;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@sparticuz/chromium-min/build/helper.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@sparticuz/chromium-min/build/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/@sparticuz/chromium-min/build/index.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nconst node_fs_1 = __webpack_require__(/*! node:fs */ \"node:fs\");\nconst follow_redirects_1 = __webpack_require__(/*! follow-redirects */ \"(rsc)/./node_modules/follow-redirects/index.js\");\nconst lambdafs_1 = __importDefault(__webpack_require__(/*! ./lambdafs */ \"(rsc)/./node_modules/@sparticuz/chromium-min/build/lambdafs.js\"));\nconst node_path_1 = __webpack_require__(/*! node:path */ \"node:path\");\nconst node_url_1 = __webpack_require__(/*! node:url */ \"node:url\");\nconst helper_1 = __webpack_require__(/*! ./helper */ \"(rsc)/./node_modules/@sparticuz/chromium-min/build/helper.js\");\nconst nodeMajorVersion = parseInt(process.versions.node.split(\".\")[0] ?? \"\");\n// Setup the lambda environment\nif ((0, helper_1.isRunningInAwsLambda)(nodeMajorVersion)) {\n    (0, helper_1.setupLambdaEnvironment)(\"/tmp/al2/lib\");\n} else if ((0, helper_1.isRunningInAwsLambdaNode20)(nodeMajorVersion)) {\n    (0, helper_1.setupLambdaEnvironment)(\"/tmp/al2023/lib\");\n}\nclass Chromium {\n    static{\n        /**\n     * If true, the graphics stack and webgl is enabled,\n     * If false, webgl will be disabled.\n     * (If false, the swiftshader.tar.br file will also not extract)\n     */ this.graphicsMode = true;\n    }\n    /**\n     * Downloads or symlinks a custom font and returns its basename, patching the environment so that Chromium can find it.\n     */ static font(input) {\n        process.env[\"HOME\"] ??= \"/tmp\";\n        if ((0, node_fs_1.existsSync)(`${process.env[\"HOME\"]}/.fonts`) !== true) {\n            (0, node_fs_1.mkdirSync)(`${process.env[\"HOME\"]}/.fonts`);\n        }\n        return new Promise((resolve, reject)=>{\n            if (/^https?:[/][/]/i.test(input) !== true) {\n                input = `file://${input}`;\n            }\n            const url = new node_url_1.URL(input);\n            const output = `${process.env[\"HOME\"]}/.fonts/${url.pathname.split(\"/\").pop()}`;\n            if ((0, node_fs_1.existsSync)(output) === true) {\n                return resolve(output.split(\"/\").pop());\n            }\n            if (url.protocol === \"file:\") {\n                (0, node_fs_1.access)(url.pathname, (error)=>{\n                    if (error != null) {\n                        return reject(error);\n                    }\n                    (0, node_fs_1.symlink)(url.pathname, output, (error)=>{\n                        return error != null ? reject(error) : resolve(url.pathname.split(\"/\").pop());\n                    });\n                });\n            } else {\n                follow_redirects_1.https.get(input, (response)=>{\n                    if (response.statusCode !== 200) {\n                        return reject(`Unexpected status code: ${response.statusCode}.`);\n                    }\n                    const stream = (0, node_fs_1.createWriteStream)(output);\n                    stream.once(\"error\", (error)=>{\n                        return reject(error);\n                    });\n                    response.on(\"data\", (chunk)=>{\n                        stream.write(chunk);\n                    });\n                    response.once(\"end\", ()=>{\n                        stream.end(()=>{\n                            return resolve(url.pathname.split(\"/\").pop());\n                        });\n                    });\n                });\n            }\n        });\n    }\n    /**\n     * Returns a list of additional Chromium flags recommended for serverless environments.\n     * The canonical list of flags can be found on https://peter.sh/experiments/chromium-command-line-switches/.\n     */ static get args() {\n        /**\n         * These are the default args in puppeteer.\n         * https://github.com/puppeteer/puppeteer/blob/3a31070d054fa3cd8116ca31c578807ed8d6f987/packages/puppeteer-core/src/node/ChromeLauncher.ts#L185\n         */ const puppeteerFlags = [\n            \"--allow-pre-commit-input\",\n            \"--disable-background-networking\",\n            \"--disable-background-timer-throttling\",\n            \"--disable-backgrounding-occluded-windows\",\n            \"--disable-breakpad\",\n            \"--disable-client-side-phishing-detection\",\n            \"--disable-component-extensions-with-background-pages\",\n            \"--disable-component-update\",\n            \"--disable-default-apps\",\n            \"--disable-dev-shm-usage\",\n            \"--disable-extensions\",\n            \"--disable-hang-monitor\",\n            \"--disable-ipc-flooding-protection\",\n            \"--disable-popup-blocking\",\n            \"--disable-prompt-on-repost\",\n            \"--disable-renderer-backgrounding\",\n            \"--disable-sync\",\n            \"--enable-automation\",\n            // TODO(sadym): remove '--enable-blink-features=IdleDetection' once\n            // IdleDetection is turned on by default.\n            \"--enable-blink-features=IdleDetection\",\n            \"--export-tagged-pdf\",\n            \"--force-color-profile=srgb\",\n            \"--metrics-recording-only\",\n            \"--no-first-run\",\n            \"--password-store=basic\",\n            \"--use-mock-keychain\"\n        ];\n        const puppeteerDisableFeatures = [\n            \"Translate\",\n            \"BackForwardCache\",\n            // AcceptCHFrame disabled because of crbug.com/1348106.\n            \"AcceptCHFrame\",\n            \"MediaRouter\",\n            \"OptimizationHints\"\n        ];\n        const puppeteerEnableFeatures = [\n            \"NetworkServiceInProcess2\"\n        ];\n        const chromiumFlags = [\n            \"--disable-domain-reliability\",\n            \"--disable-print-preview\",\n            \"--disable-speech-api\",\n            \"--disk-cache-size=33554432\",\n            \"--mute-audio\",\n            \"--no-default-browser-check\",\n            \"--no-pings\",\n            \"--single-process\",\n            \"--font-render-hinting=none\"\n        ];\n        const chromiumDisableFeatures = [\n            \"AudioServiceOutOfProcess\",\n            \"IsolateOrigins\",\n            \"site-per-process\"\n        ];\n        const chromiumEnableFeatures = [\n            \"SharedArrayBuffer\"\n        ];\n        const graphicsFlags = [\n            \"--hide-scrollbars\",\n            \"--ignore-gpu-blocklist\",\n            \"--in-process-gpu\",\n            \"--window-size=1920,1080\"\n        ];\n        // https://chromium.googlesource.com/chromium/src/+/main/docs/gpu/swiftshader.md\n        this.graphics ? graphicsFlags.push(// As the unsafe WebGL fallback, SwANGLE (ANGLE + SwiftShader Vulkan)\n        \"--use-gl=angle\", \"--use-angle=swiftshader\", \"--enable-unsafe-swiftshader\") : graphicsFlags.push(\"--disable-webgl\");\n        const insecureFlags = [\n            \"--allow-running-insecure-content\",\n            \"--disable-setuid-sandbox\",\n            \"--disable-site-isolation-trials\",\n            \"--disable-web-security\",\n            \"--no-sandbox\",\n            \"--no-zygote\"\n        ];\n        const headlessFlags = [\n            this.headless === \"shell\" ? \"--headless='shell'\" : \"--headless\"\n        ];\n        return [\n            ...puppeteerFlags,\n            ...chromiumFlags,\n            `--disable-features=${[\n                ...puppeteerDisableFeatures,\n                ...chromiumDisableFeatures\n            ].join(\",\")}`,\n            `--enable-features=${[\n                ...puppeteerEnableFeatures,\n                ...chromiumEnableFeatures\n            ].join(\",\")}`,\n            ...graphicsFlags,\n            ...insecureFlags,\n            ...headlessFlags\n        ];\n    }\n    /**\n     * Returns sensible default viewport settings for serverless environments.\n     */ static get defaultViewport() {\n        return {\n            deviceScaleFactor: 1,\n            hasTouch: false,\n            height: 1080,\n            isLandscape: true,\n            isMobile: false,\n            width: 1920\n        };\n    }\n    /**\n     * Inflates the included version of Chromium\n     * @param input The location of the `bin` folder\n     * @returns The path to the `chromium` binary\n     */ static async executablePath(input) {\n        /**\n         * If the `chromium` binary already exists in /tmp/chromium, return it.\n         */ if ((0, node_fs_1.existsSync)(\"/tmp/chromium\") === true) {\n            return Promise.resolve(\"/tmp/chromium\");\n        }\n        /**\n         * If input is a valid URL, download and extract the file. It will extract to /tmp/chromium-pack\n         * and executablePath will be recursively called on that location, which will then extract\n         * the brotli files to the correct locations\n         */ if (input && (0, helper_1.isValidUrl)(input)) {\n            return this.executablePath(await (0, helper_1.downloadAndExtract)(input));\n        }\n        /**\n         * If input is defined, use that as the location of the brotli files,\n         * otherwise, the default location is ../bin.\n         * A custom location is needed for workflows that using custom packaging.\n         */ input ??= (0, node_path_1.join)(__dirname, \"..\", \"bin\");\n        /**\n         * If the input directory doesn't exist, throw an error.\n         */ if (!(0, node_fs_1.existsSync)(input)) {\n            throw new Error(`The input directory \"${input}\" does not exist.`);\n        }\n        // Extract the required files\n        const promises = [\n            lambdafs_1.default.inflate(`${input}/chromium.br`),\n            lambdafs_1.default.inflate(`${input}/fonts.tar.br`),\n            lambdafs_1.default.inflate(`${input}/swiftshader.tar.br`)\n        ];\n        if ((0, helper_1.isRunningInAwsLambda)(nodeMajorVersion)) {\n            // If running in AWS Lambda, extract more required files\n            promises.push(lambdafs_1.default.inflate(`${input}/al2.tar.br`));\n        }\n        if ((0, helper_1.isRunningInAwsLambdaNode20)(nodeMajorVersion)) {\n            promises.push(lambdafs_1.default.inflate(`${input}/al2023.tar.br`));\n        }\n        // Await all extractions\n        const result = await Promise.all(promises);\n        // Returns the first result of the promise, which is the location of the `chromium` binary\n        return result.shift();\n    }\n    /**\n     * Returns the headless mode.\n     * \"shell\" means the `chrome-headless-shell` headless mode.\n     * @returns \"shell\"\n     */ static get headless() {\n        return \"shell\";\n    }\n    /**\n     * Sets the headless mode.\n     * \"shell\" means the 'old' (legacy, chromium < 112) headless mode.\n     * `true` means the 'new' headless mode.\n     * https://developer.chrome.com/articles/new-headless/#try-out-the-new-headless\n     * @deprecated 'New' headless mode will not be coming to chrome-headless-shell\n     */ static set setHeadlessMode(_value) {\n        console.warn(\"setHeadlessMode is deprecated. The headless mode is set to 'shell'.\");\n    }\n    /**\n     * Returns whether the graphics stack is enabled or disabled\n     * @returns boolean\n     */ static get graphics() {\n        return this.graphicsMode;\n    }\n    /**\n     * Sets whether the graphics stack is enabled or disabled.\n     * @param true means the stack is enabled. WebGL will work.\n     * @param false means that the stack is disabled. WebGL will not work.\n     * @default true\n     */ static set setGraphicsMode(value) {\n        if (typeof value !== \"boolean\") {\n            throw new Error(`Graphics mode must be a boolean, you entered '${value}'`);\n        }\n        this.graphicsMode = value;\n    }\n}\nmodule.exports = Chromium;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@sparticuz/chromium-min/build/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@sparticuz/chromium-min/build/lambdafs.js":
/*!****************************************************************!*\
  !*** ./node_modules/@sparticuz/chromium-min/build/lambdafs.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst node_fs_1 = __webpack_require__(/*! node:fs */ \"node:fs\");\nconst node_os_1 = __webpack_require__(/*! node:os */ \"node:os\");\nconst node_path_1 = __webpack_require__(/*! node:path */ \"node:path\");\nconst tar_fs_1 = __webpack_require__(/*! tar-fs */ \"(rsc)/./node_modules/tar-fs/index.js\");\nconst node_zlib_1 = __webpack_require__(/*! node:zlib */ \"node:zlib\");\nclass LambdaFS {\n    /**\n     * Decompresses a (tarballed) Brotli or Gzip compressed file and returns the path to the decompressed file/folder.\n     *\n     * @param filePath Path of the file to decompress.\n     */ static inflate(filePath) {\n        const output = filePath.includes(\"swiftshader\") ? (0, node_os_1.tmpdir)() : (0, node_path_1.join)((0, node_os_1.tmpdir)(), (0, node_path_1.basename)(filePath).replace(/[.](?:t(?:ar(?:[.](?:br|gz))?|br|gz)|br|gz)$/i, \"\"));\n        return new Promise((resolve, reject)=>{\n            if (filePath.includes(\"swiftshader\")) {\n                if ((0, node_fs_1.existsSync)(`${output}/libGLESv2.so`)) {\n                    return resolve(output);\n                }\n            } else {\n                if ((0, node_fs_1.existsSync)(output) === true) {\n                    return resolve(output);\n                }\n            }\n            let source = (0, node_fs_1.createReadStream)(filePath, {\n                highWaterMark: 2 ** 23\n            });\n            let target = null;\n            if (/[.](?:t(?:ar(?:[.](?:br|gz))?|br|gz))$/i.test(filePath) === true) {\n                target = (0, tar_fs_1.extract)(output);\n                target.once(\"finish\", ()=>{\n                    return resolve(output);\n                });\n            } else {\n                target = (0, node_fs_1.createWriteStream)(output, {\n                    mode: 448\n                });\n            }\n            source.once(\"error\", (error)=>{\n                return reject(error);\n            });\n            target.once(\"error\", (error)=>{\n                return reject(error);\n            });\n            target.once(\"close\", ()=>{\n                return resolve(output);\n            });\n            if (/(?:br|gz)$/i.test(filePath) === true) {\n                source.pipe(/br$/i.test(filePath) ? (0, node_zlib_1.createBrotliDecompress)({\n                    chunkSize: 2 ** 21\n                }) : (0, node_zlib_1.createUnzip)({\n                    chunkSize: 2 ** 21\n                })).pipe(target);\n            } else {\n                source.pipe(target);\n            }\n        });\n    }\n}\nexports[\"default\"] = LambdaFS;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNwYXJ0aWN1ei9jaHJvbWl1bS1taW4vYnVpbGQvbGFtYmRhZnMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0QsTUFBTUMsWUFBWUMsbUJBQU9BLENBQUMsd0JBQVM7QUFDbkMsTUFBTUMsWUFBWUQsbUJBQU9BLENBQUMsd0JBQVM7QUFDbkMsTUFBTUUsY0FBY0YsbUJBQU9BLENBQUMsNEJBQVc7QUFDdkMsTUFBTUcsV0FBV0gsbUJBQU9BLENBQUMsb0RBQVE7QUFDakMsTUFBTUksY0FBY0osbUJBQU9BLENBQUMsNEJBQVc7QUFDdkMsTUFBTUs7SUFDRjs7OztLQUlDLEdBQ0QsT0FBT0MsUUFBUUMsUUFBUSxFQUFFO1FBQ3JCLE1BQU1DLFNBQVNELFNBQVNFLFFBQVEsQ0FBQyxpQkFDM0IsQ0FBQyxHQUFHUixVQUFVUyxNQUFNLE1BQ3BCLENBQUMsR0FBR1IsWUFBWVMsSUFBSSxFQUFFLENBQUMsR0FBR1YsVUFBVVMsTUFBTSxLQUFLLENBQUMsR0FBR1IsWUFBWVUsUUFBUSxFQUFFTCxVQUFVTSxPQUFPLENBQUMsaURBQWlEO1FBQ2xKLE9BQU8sSUFBSUMsUUFBUSxDQUFDQyxTQUFTQztZQUN6QixJQUFJVCxTQUFTRSxRQUFRLENBQUMsZ0JBQWdCO2dCQUNsQyxJQUFJLENBQUMsR0FBR1YsVUFBVWtCLFVBQVUsRUFBRSxDQUFDLEVBQUVULE9BQU8sYUFBYSxDQUFDLEdBQUc7b0JBQ3JELE9BQU9PLFFBQVFQO2dCQUNuQjtZQUNKLE9BQ0s7Z0JBQ0QsSUFBSSxDQUFDLEdBQUdULFVBQVVrQixVQUFVLEVBQUVULFlBQVksTUFBTTtvQkFDNUMsT0FBT08sUUFBUVA7Z0JBQ25CO1lBQ0o7WUFDQSxJQUFJVSxTQUFTLENBQUMsR0FBR25CLFVBQVVvQixnQkFBZ0IsRUFBRVosVUFBVTtnQkFBRWEsZUFBZSxLQUFLO1lBQUc7WUFDaEYsSUFBSUMsU0FBUztZQUNiLElBQUksMENBQTBDQyxJQUFJLENBQUNmLGNBQWMsTUFBTTtnQkFDbkVjLFNBQVMsQ0FBQyxHQUFHbEIsU0FBU29CLE9BQU8sRUFBRWY7Z0JBQy9CYSxPQUFPRyxJQUFJLENBQUMsVUFBVTtvQkFDbEIsT0FBT1QsUUFBUVA7Z0JBQ25CO1lBQ0osT0FDSztnQkFDRGEsU0FBUyxDQUFDLEdBQUd0QixVQUFVMEIsaUJBQWlCLEVBQUVqQixRQUFRO29CQUFFa0IsTUFBTTtnQkFBTTtZQUNwRTtZQUNBUixPQUFPTSxJQUFJLENBQUMsU0FBUyxDQUFDRztnQkFDbEIsT0FBT1gsT0FBT1c7WUFDbEI7WUFDQU4sT0FBT0csSUFBSSxDQUFDLFNBQVMsQ0FBQ0c7Z0JBQ2xCLE9BQU9YLE9BQU9XO1lBQ2xCO1lBQ0FOLE9BQU9HLElBQUksQ0FBQyxTQUFTO2dCQUNqQixPQUFPVCxRQUFRUDtZQUNuQjtZQUNBLElBQUksY0FBY2MsSUFBSSxDQUFDZixjQUFjLE1BQU07Z0JBQ3ZDVyxPQUNLVSxJQUFJLENBQUMsT0FBT04sSUFBSSxDQUFDZixZQUNoQixDQUFDLEdBQUdILFlBQVl5QixzQkFBc0IsRUFBRTtvQkFBRUMsV0FBVyxLQUFLO2dCQUFHLEtBQzdELENBQUMsR0FBRzFCLFlBQVkyQixXQUFXLEVBQUU7b0JBQUVELFdBQVcsS0FBSztnQkFBRyxJQUNuREYsSUFBSSxDQUFDUDtZQUNkLE9BQ0s7Z0JBQ0RILE9BQU9VLElBQUksQ0FBQ1A7WUFDaEI7UUFDSjtJQUNKO0FBQ0o7QUFDQXhCLGtCQUFlLEdBQUdRIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaW52b2lmeS8uL25vZGVfbW9kdWxlcy9Ac3BhcnRpY3V6L2Nocm9taXVtLW1pbi9idWlsZC9sYW1iZGFmcy5qcz8xZWQ3Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3Qgbm9kZV9mc18xID0gcmVxdWlyZShcIm5vZGU6ZnNcIik7XG5jb25zdCBub2RlX29zXzEgPSByZXF1aXJlKFwibm9kZTpvc1wiKTtcbmNvbnN0IG5vZGVfcGF0aF8xID0gcmVxdWlyZShcIm5vZGU6cGF0aFwiKTtcbmNvbnN0IHRhcl9mc18xID0gcmVxdWlyZShcInRhci1mc1wiKTtcbmNvbnN0IG5vZGVfemxpYl8xID0gcmVxdWlyZShcIm5vZGU6emxpYlwiKTtcbmNsYXNzIExhbWJkYUZTIHtcbiAgICAvKipcbiAgICAgKiBEZWNvbXByZXNzZXMgYSAodGFyYmFsbGVkKSBCcm90bGkgb3IgR3ppcCBjb21wcmVzc2VkIGZpbGUgYW5kIHJldHVybnMgdGhlIHBhdGggdG8gdGhlIGRlY29tcHJlc3NlZCBmaWxlL2ZvbGRlci5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBmaWxlUGF0aCBQYXRoIG9mIHRoZSBmaWxlIHRvIGRlY29tcHJlc3MuXG4gICAgICovXG4gICAgc3RhdGljIGluZmxhdGUoZmlsZVBhdGgpIHtcbiAgICAgICAgY29uc3Qgb3V0cHV0ID0gZmlsZVBhdGguaW5jbHVkZXMoXCJzd2lmdHNoYWRlclwiKVxuICAgICAgICAgICAgPyAoMCwgbm9kZV9vc18xLnRtcGRpcikoKVxuICAgICAgICAgICAgOiAoMCwgbm9kZV9wYXRoXzEuam9pbikoKDAsIG5vZGVfb3NfMS50bXBkaXIpKCksICgwLCBub2RlX3BhdGhfMS5iYXNlbmFtZSkoZmlsZVBhdGgpLnJlcGxhY2UoL1suXSg/OnQoPzphcig/OlsuXSg/OmJyfGd6KSk/fGJyfGd6KXxicnxneikkL2ksIFwiXCIpKTtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIGlmIChmaWxlUGF0aC5pbmNsdWRlcyhcInN3aWZ0c2hhZGVyXCIpKSB7XG4gICAgICAgICAgICAgICAgaWYgKCgwLCBub2RlX2ZzXzEuZXhpc3RzU3luYykoYCR7b3V0cHV0fS9saWJHTEVTdjIuc29gKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZShvdXRwdXQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICgoMCwgbm9kZV9mc18xLmV4aXN0c1N5bmMpKG91dHB1dCkgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUob3V0cHV0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgc291cmNlID0gKDAsIG5vZGVfZnNfMS5jcmVhdGVSZWFkU3RyZWFtKShmaWxlUGF0aCwgeyBoaWdoV2F0ZXJNYXJrOiAyICoqIDIzIH0pO1xuICAgICAgICAgICAgbGV0IHRhcmdldCA9IG51bGw7XG4gICAgICAgICAgICBpZiAoL1suXSg/OnQoPzphcig/OlsuXSg/OmJyfGd6KSk/fGJyfGd6KSkkL2kudGVzdChmaWxlUGF0aCkgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICB0YXJnZXQgPSAoMCwgdGFyX2ZzXzEuZXh0cmFjdCkob3V0cHV0KTtcbiAgICAgICAgICAgICAgICB0YXJnZXQub25jZShcImZpbmlzaFwiLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKG91dHB1dCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0YXJnZXQgPSAoMCwgbm9kZV9mc18xLmNyZWF0ZVdyaXRlU3RyZWFtKShvdXRwdXQsIHsgbW9kZTogMG83MDAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzb3VyY2Uub25jZShcImVycm9yXCIsIChlcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiByZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0YXJnZXQub25jZShcImVycm9yXCIsIChlcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiByZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0YXJnZXQub25jZShcImNsb3NlXCIsICgpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZShvdXRwdXQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAoLyg/OmJyfGd6KSQvaS50ZXN0KGZpbGVQYXRoKSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIHNvdXJjZVxuICAgICAgICAgICAgICAgICAgICAucGlwZSgvYnIkL2kudGVzdChmaWxlUGF0aClcbiAgICAgICAgICAgICAgICAgICAgPyAoMCwgbm9kZV96bGliXzEuY3JlYXRlQnJvdGxpRGVjb21wcmVzcykoeyBjaHVua1NpemU6IDIgKiogMjEgfSlcbiAgICAgICAgICAgICAgICAgICAgOiAoMCwgbm9kZV96bGliXzEuY3JlYXRlVW56aXApKHsgY2h1bmtTaXplOiAyICoqIDIxIH0pKVxuICAgICAgICAgICAgICAgICAgICAucGlwZSh0YXJnZXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgc291cmNlLnBpcGUodGFyZ2V0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gTGFtYmRhRlM7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJub2RlX2ZzXzEiLCJyZXF1aXJlIiwibm9kZV9vc18xIiwibm9kZV9wYXRoXzEiLCJ0YXJfZnNfMSIsIm5vZGVfemxpYl8xIiwiTGFtYmRhRlMiLCJpbmZsYXRlIiwiZmlsZVBhdGgiLCJvdXRwdXQiLCJpbmNsdWRlcyIsInRtcGRpciIsImpvaW4iLCJiYXNlbmFtZSIsInJlcGxhY2UiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImV4aXN0c1N5bmMiLCJzb3VyY2UiLCJjcmVhdGVSZWFkU3RyZWFtIiwiaGlnaFdhdGVyTWFyayIsInRhcmdldCIsInRlc3QiLCJleHRyYWN0Iiwib25jZSIsImNyZWF0ZVdyaXRlU3RyZWFtIiwibW9kZSIsImVycm9yIiwicGlwZSIsImNyZWF0ZUJyb3RsaURlY29tcHJlc3MiLCJjaHVua1NpemUiLCJjcmVhdGVVbnppcCIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@sparticuz/chromium-min/build/lambdafs.js\n");

/***/ })

};
;