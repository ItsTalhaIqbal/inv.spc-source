"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/streamx";
exports.ids = ["vendor-chunks/streamx"];
exports.modules = {

/***/ "(rsc)/./node_modules/streamx/index.js":
/*!***************************************!*\
  !*** ./node_modules/streamx/index.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { EventEmitter } = __webpack_require__(/*! events */ \"events\");\nconst STREAM_DESTROYED = new Error(\"Stream was destroyed\");\nconst PREMATURE_CLOSE = new Error(\"Premature close\");\nconst FIFO = __webpack_require__(/*! fast-fifo */ \"(rsc)/./node_modules/fast-fifo/index.js\");\nconst TextDecoder = __webpack_require__(/*! text-decoder */ \"(rsc)/./node_modules/text-decoder/index.js\");\n// if we do a future major, expect queue microtask to be there always, for now a bit defensive\nconst qmt = typeof queueMicrotask === \"undefined\" ? (fn)=>global.process.nextTick(fn) : queueMicrotask;\n/* eslint-disable no-multi-spaces */ // 29 bits used total (4 from shared, 14 from read, and 11 from write)\nconst MAX = (1 << 29) - 1;\n// Shared state\nconst OPENING = 1;\nconst PREDESTROYING = 2;\nconst DESTROYING = 4;\nconst DESTROYED = 8;\nconst NOT_OPENING = MAX ^ OPENING;\nconst NOT_PREDESTROYING = MAX ^ PREDESTROYING;\n// Read state (4 bit offset from shared state)\nconst READ_ACTIVE = 1 << 4;\nconst READ_UPDATING = 2 << 4;\nconst READ_PRIMARY = 4 << 4;\nconst READ_QUEUED = 8 << 4;\nconst READ_RESUMED = 16 << 4;\nconst READ_PIPE_DRAINED = 32 << 4;\nconst READ_ENDING = 64 << 4;\nconst READ_EMIT_DATA = 128 << 4;\nconst READ_EMIT_READABLE = 256 << 4;\nconst READ_EMITTED_READABLE = 512 << 4;\nconst READ_DONE = 1024 << 4;\nconst READ_NEXT_TICK = 2048 << 4;\nconst READ_NEEDS_PUSH = 4096 << 4;\nconst READ_READ_AHEAD = 8192 << 4;\n// Combined read state\nconst READ_FLOWING = READ_RESUMED | READ_PIPE_DRAINED;\nconst READ_ACTIVE_AND_NEEDS_PUSH = READ_ACTIVE | READ_NEEDS_PUSH;\nconst READ_PRIMARY_AND_ACTIVE = READ_PRIMARY | READ_ACTIVE;\nconst READ_EMIT_READABLE_AND_QUEUED = READ_EMIT_READABLE | READ_QUEUED;\nconst READ_RESUMED_READ_AHEAD = READ_RESUMED | READ_READ_AHEAD;\nconst READ_NOT_ACTIVE = MAX ^ READ_ACTIVE;\nconst READ_NON_PRIMARY = MAX ^ READ_PRIMARY;\nconst READ_NON_PRIMARY_AND_PUSHED = MAX ^ (READ_PRIMARY | READ_NEEDS_PUSH);\nconst READ_PUSHED = MAX ^ READ_NEEDS_PUSH;\nconst READ_PAUSED = MAX ^ READ_RESUMED;\nconst READ_NOT_QUEUED = MAX ^ (READ_QUEUED | READ_EMITTED_READABLE);\nconst READ_NOT_ENDING = MAX ^ READ_ENDING;\nconst READ_PIPE_NOT_DRAINED = MAX ^ READ_FLOWING;\nconst READ_NOT_NEXT_TICK = MAX ^ READ_NEXT_TICK;\nconst READ_NOT_UPDATING = MAX ^ READ_UPDATING;\nconst READ_NO_READ_AHEAD = MAX ^ READ_READ_AHEAD;\nconst READ_PAUSED_NO_READ_AHEAD = MAX ^ READ_RESUMED_READ_AHEAD;\n// Write state (18 bit offset, 4 bit offset from shared state and 14 from read state)\nconst WRITE_ACTIVE = 1 << 18;\nconst WRITE_UPDATING = 2 << 18;\nconst WRITE_PRIMARY = 4 << 18;\nconst WRITE_QUEUED = 8 << 18;\nconst WRITE_UNDRAINED = 16 << 18;\nconst WRITE_DONE = 32 << 18;\nconst WRITE_EMIT_DRAIN = 64 << 18;\nconst WRITE_NEXT_TICK = 128 << 18;\nconst WRITE_WRITING = 256 << 18;\nconst WRITE_FINISHING = 512 << 18;\nconst WRITE_CORKED = 1024 << 18;\nconst WRITE_NOT_ACTIVE = MAX ^ (WRITE_ACTIVE | WRITE_WRITING);\nconst WRITE_NON_PRIMARY = MAX ^ WRITE_PRIMARY;\nconst WRITE_NOT_FINISHING = MAX ^ (WRITE_ACTIVE | WRITE_FINISHING);\nconst WRITE_DRAINED = MAX ^ WRITE_UNDRAINED;\nconst WRITE_NOT_QUEUED = MAX ^ WRITE_QUEUED;\nconst WRITE_NOT_NEXT_TICK = MAX ^ WRITE_NEXT_TICK;\nconst WRITE_NOT_UPDATING = MAX ^ WRITE_UPDATING;\nconst WRITE_NOT_CORKED = MAX ^ WRITE_CORKED;\n// Combined shared state\nconst ACTIVE = READ_ACTIVE | WRITE_ACTIVE;\nconst NOT_ACTIVE = MAX ^ ACTIVE;\nconst DONE = READ_DONE | WRITE_DONE;\nconst DESTROY_STATUS = DESTROYING | DESTROYED | PREDESTROYING;\nconst OPEN_STATUS = DESTROY_STATUS | OPENING;\nconst AUTO_DESTROY = DESTROY_STATUS | DONE;\nconst NON_PRIMARY = WRITE_NON_PRIMARY & READ_NON_PRIMARY;\nconst ACTIVE_OR_TICKING = WRITE_NEXT_TICK | READ_NEXT_TICK;\nconst TICKING = ACTIVE_OR_TICKING & NOT_ACTIVE;\nconst IS_OPENING = OPEN_STATUS | TICKING;\n// Combined shared state and read state\nconst READ_PRIMARY_STATUS = OPEN_STATUS | READ_ENDING | READ_DONE;\nconst READ_STATUS = OPEN_STATUS | READ_DONE | READ_QUEUED;\nconst READ_ENDING_STATUS = OPEN_STATUS | READ_ENDING | READ_QUEUED;\nconst READ_READABLE_STATUS = OPEN_STATUS | READ_EMIT_READABLE | READ_QUEUED | READ_EMITTED_READABLE;\nconst SHOULD_NOT_READ = OPEN_STATUS | READ_ACTIVE | READ_ENDING | READ_DONE | READ_NEEDS_PUSH | READ_READ_AHEAD;\nconst READ_BACKPRESSURE_STATUS = DESTROY_STATUS | READ_ENDING | READ_DONE;\nconst READ_UPDATE_SYNC_STATUS = READ_UPDATING | OPEN_STATUS | READ_NEXT_TICK | READ_PRIMARY;\nconst READ_NEXT_TICK_OR_OPENING = READ_NEXT_TICK | OPENING;\n// Combined write state\nconst WRITE_PRIMARY_STATUS = OPEN_STATUS | WRITE_FINISHING | WRITE_DONE;\nconst WRITE_QUEUED_AND_UNDRAINED = WRITE_QUEUED | WRITE_UNDRAINED;\nconst WRITE_QUEUED_AND_ACTIVE = WRITE_QUEUED | WRITE_ACTIVE;\nconst WRITE_DRAIN_STATUS = WRITE_QUEUED | WRITE_UNDRAINED | OPEN_STATUS | WRITE_ACTIVE;\nconst WRITE_STATUS = OPEN_STATUS | WRITE_ACTIVE | WRITE_QUEUED | WRITE_CORKED;\nconst WRITE_PRIMARY_AND_ACTIVE = WRITE_PRIMARY | WRITE_ACTIVE;\nconst WRITE_ACTIVE_AND_WRITING = WRITE_ACTIVE | WRITE_WRITING;\nconst WRITE_FINISHING_STATUS = OPEN_STATUS | WRITE_FINISHING | WRITE_QUEUED_AND_ACTIVE | WRITE_DONE;\nconst WRITE_BACKPRESSURE_STATUS = WRITE_UNDRAINED | DESTROY_STATUS | WRITE_FINISHING | WRITE_DONE;\nconst WRITE_UPDATE_SYNC_STATUS = WRITE_UPDATING | OPEN_STATUS | WRITE_NEXT_TICK | WRITE_PRIMARY;\nconst WRITE_DROP_DATA = WRITE_FINISHING | WRITE_DONE | DESTROY_STATUS;\nconst asyncIterator = Symbol.asyncIterator || Symbol(\"asyncIterator\");\nclass WritableState {\n    constructor(stream, { highWaterMark = 16384, map = null, mapWritable, byteLength, byteLengthWritable } = {}){\n        this.stream = stream;\n        this.queue = new FIFO();\n        this.highWaterMark = highWaterMark;\n        this.buffered = 0;\n        this.error = null;\n        this.pipeline = null;\n        this.drains = null // if we add more seldomly used helpers we might them into a subobject so its a single ptr\n        ;\n        this.byteLength = byteLengthWritable || byteLength || defaultByteLength;\n        this.map = mapWritable || map;\n        this.afterWrite = afterWrite.bind(this);\n        this.afterUpdateNextTick = updateWriteNT.bind(this);\n    }\n    get ended() {\n        return (this.stream._duplexState & WRITE_DONE) !== 0;\n    }\n    push(data) {\n        if ((this.stream._duplexState & WRITE_DROP_DATA) !== 0) return false;\n        if (this.map !== null) data = this.map(data);\n        this.buffered += this.byteLength(data);\n        this.queue.push(data);\n        if (this.buffered < this.highWaterMark) {\n            this.stream._duplexState |= WRITE_QUEUED;\n            return true;\n        }\n        this.stream._duplexState |= WRITE_QUEUED_AND_UNDRAINED;\n        return false;\n    }\n    shift() {\n        const data = this.queue.shift();\n        this.buffered -= this.byteLength(data);\n        if (this.buffered === 0) this.stream._duplexState &= WRITE_NOT_QUEUED;\n        return data;\n    }\n    end(data) {\n        if (typeof data === \"function\") this.stream.once(\"finish\", data);\n        else if (data !== undefined && data !== null) this.push(data);\n        this.stream._duplexState = (this.stream._duplexState | WRITE_FINISHING) & WRITE_NON_PRIMARY;\n    }\n    autoBatch(data, cb) {\n        const buffer = [];\n        const stream = this.stream;\n        buffer.push(data);\n        while((stream._duplexState & WRITE_STATUS) === WRITE_QUEUED_AND_ACTIVE){\n            buffer.push(stream._writableState.shift());\n        }\n        if ((stream._duplexState & OPEN_STATUS) !== 0) return cb(null);\n        stream._writev(buffer, cb);\n    }\n    update() {\n        const stream = this.stream;\n        stream._duplexState |= WRITE_UPDATING;\n        do {\n            while((stream._duplexState & WRITE_STATUS) === WRITE_QUEUED){\n                const data = this.shift();\n                stream._duplexState |= WRITE_ACTIVE_AND_WRITING;\n                stream._write(data, this.afterWrite);\n            }\n            if ((stream._duplexState & WRITE_PRIMARY_AND_ACTIVE) === 0) this.updateNonPrimary();\n        }while (this.continueUpdate() === true);\n        stream._duplexState &= WRITE_NOT_UPDATING;\n    }\n    updateNonPrimary() {\n        const stream = this.stream;\n        if ((stream._duplexState & WRITE_FINISHING_STATUS) === WRITE_FINISHING) {\n            stream._duplexState = stream._duplexState | WRITE_ACTIVE;\n            stream._final(afterFinal.bind(this));\n            return;\n        }\n        if ((stream._duplexState & DESTROY_STATUS) === DESTROYING) {\n            if ((stream._duplexState & ACTIVE_OR_TICKING) === 0) {\n                stream._duplexState |= ACTIVE;\n                stream._destroy(afterDestroy.bind(this));\n            }\n            return;\n        }\n        if ((stream._duplexState & IS_OPENING) === OPENING) {\n            stream._duplexState = (stream._duplexState | ACTIVE) & NOT_OPENING;\n            stream._open(afterOpen.bind(this));\n        }\n    }\n    continueUpdate() {\n        if ((this.stream._duplexState & WRITE_NEXT_TICK) === 0) return false;\n        this.stream._duplexState &= WRITE_NOT_NEXT_TICK;\n        return true;\n    }\n    updateCallback() {\n        if ((this.stream._duplexState & WRITE_UPDATE_SYNC_STATUS) === WRITE_PRIMARY) this.update();\n        else this.updateNextTick();\n    }\n    updateNextTick() {\n        if ((this.stream._duplexState & WRITE_NEXT_TICK) !== 0) return;\n        this.stream._duplexState |= WRITE_NEXT_TICK;\n        if ((this.stream._duplexState & WRITE_UPDATING) === 0) qmt(this.afterUpdateNextTick);\n    }\n}\nclass ReadableState {\n    constructor(stream, { highWaterMark = 16384, map = null, mapReadable, byteLength, byteLengthReadable } = {}){\n        this.stream = stream;\n        this.queue = new FIFO();\n        this.highWaterMark = highWaterMark === 0 ? 1 : highWaterMark;\n        this.buffered = 0;\n        this.readAhead = highWaterMark > 0;\n        this.error = null;\n        this.pipeline = null;\n        this.byteLength = byteLengthReadable || byteLength || defaultByteLength;\n        this.map = mapReadable || map;\n        this.pipeTo = null;\n        this.afterRead = afterRead.bind(this);\n        this.afterUpdateNextTick = updateReadNT.bind(this);\n    }\n    get ended() {\n        return (this.stream._duplexState & READ_DONE) !== 0;\n    }\n    pipe(pipeTo, cb) {\n        if (this.pipeTo !== null) throw new Error(\"Can only pipe to one destination\");\n        if (typeof cb !== \"function\") cb = null;\n        this.stream._duplexState |= READ_PIPE_DRAINED;\n        this.pipeTo = pipeTo;\n        this.pipeline = new Pipeline(this.stream, pipeTo, cb);\n        if (cb) this.stream.on(\"error\", noop) // We already error handle this so supress crashes\n        ;\n        if (isStreamx(pipeTo)) {\n            pipeTo._writableState.pipeline = this.pipeline;\n            if (cb) pipeTo.on(\"error\", noop) // We already error handle this so supress crashes\n            ;\n            pipeTo.on(\"finish\", this.pipeline.finished.bind(this.pipeline)) // TODO: just call finished from pipeTo itself\n            ;\n        } else {\n            const onerror = this.pipeline.done.bind(this.pipeline, pipeTo);\n            const onclose = this.pipeline.done.bind(this.pipeline, pipeTo, null) // onclose has a weird bool arg\n            ;\n            pipeTo.on(\"error\", onerror);\n            pipeTo.on(\"close\", onclose);\n            pipeTo.on(\"finish\", this.pipeline.finished.bind(this.pipeline));\n        }\n        pipeTo.on(\"drain\", afterDrain.bind(this));\n        this.stream.emit(\"piping\", pipeTo);\n        pipeTo.emit(\"pipe\", this.stream);\n    }\n    push(data) {\n        const stream = this.stream;\n        if (data === null) {\n            this.highWaterMark = 0;\n            stream._duplexState = (stream._duplexState | READ_ENDING) & READ_NON_PRIMARY_AND_PUSHED;\n            return false;\n        }\n        if (this.map !== null) {\n            data = this.map(data);\n            if (data === null) {\n                stream._duplexState &= READ_PUSHED;\n                return this.buffered < this.highWaterMark;\n            }\n        }\n        this.buffered += this.byteLength(data);\n        this.queue.push(data);\n        stream._duplexState = (stream._duplexState | READ_QUEUED) & READ_PUSHED;\n        return this.buffered < this.highWaterMark;\n    }\n    shift() {\n        const data = this.queue.shift();\n        this.buffered -= this.byteLength(data);\n        if (this.buffered === 0) this.stream._duplexState &= READ_NOT_QUEUED;\n        return data;\n    }\n    unshift(data) {\n        const pending = [\n            this.map !== null ? this.map(data) : data\n        ];\n        while(this.buffered > 0)pending.push(this.shift());\n        for(let i = 0; i < pending.length - 1; i++){\n            const data = pending[i];\n            this.buffered += this.byteLength(data);\n            this.queue.push(data);\n        }\n        this.push(pending[pending.length - 1]);\n    }\n    read() {\n        const stream = this.stream;\n        if ((stream._duplexState & READ_STATUS) === READ_QUEUED) {\n            const data = this.shift();\n            if (this.pipeTo !== null && this.pipeTo.write(data) === false) stream._duplexState &= READ_PIPE_NOT_DRAINED;\n            if ((stream._duplexState & READ_EMIT_DATA) !== 0) stream.emit(\"data\", data);\n            return data;\n        }\n        if (this.readAhead === false) {\n            stream._duplexState |= READ_READ_AHEAD;\n            this.updateNextTick();\n        }\n        return null;\n    }\n    drain() {\n        const stream = this.stream;\n        while((stream._duplexState & READ_STATUS) === READ_QUEUED && (stream._duplexState & READ_FLOWING) !== 0){\n            const data = this.shift();\n            if (this.pipeTo !== null && this.pipeTo.write(data) === false) stream._duplexState &= READ_PIPE_NOT_DRAINED;\n            if ((stream._duplexState & READ_EMIT_DATA) !== 0) stream.emit(\"data\", data);\n        }\n    }\n    update() {\n        const stream = this.stream;\n        stream._duplexState |= READ_UPDATING;\n        do {\n            this.drain();\n            while(this.buffered < this.highWaterMark && (stream._duplexState & SHOULD_NOT_READ) === READ_READ_AHEAD){\n                stream._duplexState |= READ_ACTIVE_AND_NEEDS_PUSH;\n                stream._read(this.afterRead);\n                this.drain();\n            }\n            if ((stream._duplexState & READ_READABLE_STATUS) === READ_EMIT_READABLE_AND_QUEUED) {\n                stream._duplexState |= READ_EMITTED_READABLE;\n                stream.emit(\"readable\");\n            }\n            if ((stream._duplexState & READ_PRIMARY_AND_ACTIVE) === 0) this.updateNonPrimary();\n        }while (this.continueUpdate() === true);\n        stream._duplexState &= READ_NOT_UPDATING;\n    }\n    updateNonPrimary() {\n        const stream = this.stream;\n        if ((stream._duplexState & READ_ENDING_STATUS) === READ_ENDING) {\n            stream._duplexState = (stream._duplexState | READ_DONE) & READ_NOT_ENDING;\n            stream.emit(\"end\");\n            if ((stream._duplexState & AUTO_DESTROY) === DONE) stream._duplexState |= DESTROYING;\n            if (this.pipeTo !== null) this.pipeTo.end();\n        }\n        if ((stream._duplexState & DESTROY_STATUS) === DESTROYING) {\n            if ((stream._duplexState & ACTIVE_OR_TICKING) === 0) {\n                stream._duplexState |= ACTIVE;\n                stream._destroy(afterDestroy.bind(this));\n            }\n            return;\n        }\n        if ((stream._duplexState & IS_OPENING) === OPENING) {\n            stream._duplexState = (stream._duplexState | ACTIVE) & NOT_OPENING;\n            stream._open(afterOpen.bind(this));\n        }\n    }\n    continueUpdate() {\n        if ((this.stream._duplexState & READ_NEXT_TICK) === 0) return false;\n        this.stream._duplexState &= READ_NOT_NEXT_TICK;\n        return true;\n    }\n    updateCallback() {\n        if ((this.stream._duplexState & READ_UPDATE_SYNC_STATUS) === READ_PRIMARY) this.update();\n        else this.updateNextTick();\n    }\n    updateNextTickIfOpen() {\n        if ((this.stream._duplexState & READ_NEXT_TICK_OR_OPENING) !== 0) return;\n        this.stream._duplexState |= READ_NEXT_TICK;\n        if ((this.stream._duplexState & READ_UPDATING) === 0) qmt(this.afterUpdateNextTick);\n    }\n    updateNextTick() {\n        if ((this.stream._duplexState & READ_NEXT_TICK) !== 0) return;\n        this.stream._duplexState |= READ_NEXT_TICK;\n        if ((this.stream._duplexState & READ_UPDATING) === 0) qmt(this.afterUpdateNextTick);\n    }\n}\nclass TransformState {\n    constructor(stream){\n        this.data = null;\n        this.afterTransform = afterTransform.bind(stream);\n        this.afterFinal = null;\n    }\n}\nclass Pipeline {\n    constructor(src, dst, cb){\n        this.from = src;\n        this.to = dst;\n        this.afterPipe = cb;\n        this.error = null;\n        this.pipeToFinished = false;\n    }\n    finished() {\n        this.pipeToFinished = true;\n    }\n    done(stream, err) {\n        if (err) this.error = err;\n        if (stream === this.to) {\n            this.to = null;\n            if (this.from !== null) {\n                if ((this.from._duplexState & READ_DONE) === 0 || !this.pipeToFinished) {\n                    this.from.destroy(this.error || new Error(\"Writable stream closed prematurely\"));\n                }\n                return;\n            }\n        }\n        if (stream === this.from) {\n            this.from = null;\n            if (this.to !== null) {\n                if ((stream._duplexState & READ_DONE) === 0) {\n                    this.to.destroy(this.error || new Error(\"Readable stream closed before ending\"));\n                }\n                return;\n            }\n        }\n        if (this.afterPipe !== null) this.afterPipe(this.error);\n        this.to = this.from = this.afterPipe = null;\n    }\n}\nfunction afterDrain() {\n    this.stream._duplexState |= READ_PIPE_DRAINED;\n    this.updateCallback();\n}\nfunction afterFinal(err) {\n    const stream = this.stream;\n    if (err) stream.destroy(err);\n    if ((stream._duplexState & DESTROY_STATUS) === 0) {\n        stream._duplexState |= WRITE_DONE;\n        stream.emit(\"finish\");\n    }\n    if ((stream._duplexState & AUTO_DESTROY) === DONE) {\n        stream._duplexState |= DESTROYING;\n    }\n    stream._duplexState &= WRITE_NOT_FINISHING;\n    // no need to wait the extra tick here, so we short circuit that\n    if ((stream._duplexState & WRITE_UPDATING) === 0) this.update();\n    else this.updateNextTick();\n}\nfunction afterDestroy(err) {\n    const stream = this.stream;\n    if (!err && this.error !== STREAM_DESTROYED) err = this.error;\n    if (err) stream.emit(\"error\", err);\n    stream._duplexState |= DESTROYED;\n    stream.emit(\"close\");\n    const rs = stream._readableState;\n    const ws = stream._writableState;\n    if (rs !== null && rs.pipeline !== null) rs.pipeline.done(stream, err);\n    if (ws !== null) {\n        while(ws.drains !== null && ws.drains.length > 0)ws.drains.shift().resolve(false);\n        if (ws.pipeline !== null) ws.pipeline.done(stream, err);\n    }\n}\nfunction afterWrite(err) {\n    const stream = this.stream;\n    if (err) stream.destroy(err);\n    stream._duplexState &= WRITE_NOT_ACTIVE;\n    if (this.drains !== null) tickDrains(this.drains);\n    if ((stream._duplexState & WRITE_DRAIN_STATUS) === WRITE_UNDRAINED) {\n        stream._duplexState &= WRITE_DRAINED;\n        if ((stream._duplexState & WRITE_EMIT_DRAIN) === WRITE_EMIT_DRAIN) {\n            stream.emit(\"drain\");\n        }\n    }\n    this.updateCallback();\n}\nfunction afterRead(err) {\n    if (err) this.stream.destroy(err);\n    this.stream._duplexState &= READ_NOT_ACTIVE;\n    if (this.readAhead === false && (this.stream._duplexState & READ_RESUMED) === 0) this.stream._duplexState &= READ_NO_READ_AHEAD;\n    this.updateCallback();\n}\nfunction updateReadNT() {\n    if ((this.stream._duplexState & READ_UPDATING) === 0) {\n        this.stream._duplexState &= READ_NOT_NEXT_TICK;\n        this.update();\n    }\n}\nfunction updateWriteNT() {\n    if ((this.stream._duplexState & WRITE_UPDATING) === 0) {\n        this.stream._duplexState &= WRITE_NOT_NEXT_TICK;\n        this.update();\n    }\n}\nfunction tickDrains(drains) {\n    for(let i = 0; i < drains.length; i++){\n        // drains.writes are monotonic, so if one is 0 its always the first one\n        if (--drains[i].writes === 0) {\n            drains.shift().resolve(true);\n            i--;\n        }\n    }\n}\nfunction afterOpen(err) {\n    const stream = this.stream;\n    if (err) stream.destroy(err);\n    if ((stream._duplexState & DESTROYING) === 0) {\n        if ((stream._duplexState & READ_PRIMARY_STATUS) === 0) stream._duplexState |= READ_PRIMARY;\n        if ((stream._duplexState & WRITE_PRIMARY_STATUS) === 0) stream._duplexState |= WRITE_PRIMARY;\n        stream.emit(\"open\");\n    }\n    stream._duplexState &= NOT_ACTIVE;\n    if (stream._writableState !== null) {\n        stream._writableState.updateCallback();\n    }\n    if (stream._readableState !== null) {\n        stream._readableState.updateCallback();\n    }\n}\nfunction afterTransform(err, data) {\n    if (data !== undefined && data !== null) this.push(data);\n    this._writableState.afterWrite(err);\n}\nfunction newListener(name) {\n    if (this._readableState !== null) {\n        if (name === \"data\") {\n            this._duplexState |= READ_EMIT_DATA | READ_RESUMED_READ_AHEAD;\n            this._readableState.updateNextTick();\n        }\n        if (name === \"readable\") {\n            this._duplexState |= READ_EMIT_READABLE;\n            this._readableState.updateNextTick();\n        }\n    }\n    if (this._writableState !== null) {\n        if (name === \"drain\") {\n            this._duplexState |= WRITE_EMIT_DRAIN;\n            this._writableState.updateNextTick();\n        }\n    }\n}\nclass Stream extends EventEmitter {\n    constructor(opts){\n        super();\n        this._duplexState = 0;\n        this._readableState = null;\n        this._writableState = null;\n        if (opts) {\n            if (opts.open) this._open = opts.open;\n            if (opts.destroy) this._destroy = opts.destroy;\n            if (opts.predestroy) this._predestroy = opts.predestroy;\n            if (opts.signal) {\n                opts.signal.addEventListener(\"abort\", abort.bind(this));\n            }\n        }\n        this.on(\"newListener\", newListener);\n    }\n    _open(cb) {\n        cb(null);\n    }\n    _destroy(cb) {\n        cb(null);\n    }\n    _predestroy() {\n    // does nothing\n    }\n    get readable() {\n        return this._readableState !== null ? true : undefined;\n    }\n    get writable() {\n        return this._writableState !== null ? true : undefined;\n    }\n    get destroyed() {\n        return (this._duplexState & DESTROYED) !== 0;\n    }\n    get destroying() {\n        return (this._duplexState & DESTROY_STATUS) !== 0;\n    }\n    destroy(err) {\n        if ((this._duplexState & DESTROY_STATUS) === 0) {\n            if (!err) err = STREAM_DESTROYED;\n            this._duplexState = (this._duplexState | DESTROYING) & NON_PRIMARY;\n            if (this._readableState !== null) {\n                this._readableState.highWaterMark = 0;\n                this._readableState.error = err;\n            }\n            if (this._writableState !== null) {\n                this._writableState.highWaterMark = 0;\n                this._writableState.error = err;\n            }\n            this._duplexState |= PREDESTROYING;\n            this._predestroy();\n            this._duplexState &= NOT_PREDESTROYING;\n            if (this._readableState !== null) this._readableState.updateNextTick();\n            if (this._writableState !== null) this._writableState.updateNextTick();\n        }\n    }\n}\nclass Readable extends Stream {\n    constructor(opts){\n        super(opts);\n        this._duplexState |= OPENING | WRITE_DONE | READ_READ_AHEAD;\n        this._readableState = new ReadableState(this, opts);\n        if (opts) {\n            if (this._readableState.readAhead === false) this._duplexState &= READ_NO_READ_AHEAD;\n            if (opts.read) this._read = opts.read;\n            if (opts.eagerOpen) this._readableState.updateNextTick();\n            if (opts.encoding) this.setEncoding(opts.encoding);\n        }\n    }\n    setEncoding(encoding) {\n        const dec = new TextDecoder(encoding);\n        const map = this._readableState.map || echo;\n        this._readableState.map = mapOrSkip;\n        return this;\n        function mapOrSkip(data) {\n            const next = dec.push(data);\n            return next === \"\" && (data.byteLength !== 0 || dec.remaining > 0) ? null : map(next);\n        }\n    }\n    _read(cb) {\n        cb(null);\n    }\n    pipe(dest, cb) {\n        this._readableState.updateNextTick();\n        this._readableState.pipe(dest, cb);\n        return dest;\n    }\n    read() {\n        this._readableState.updateNextTick();\n        return this._readableState.read();\n    }\n    push(data) {\n        this._readableState.updateNextTickIfOpen();\n        return this._readableState.push(data);\n    }\n    unshift(data) {\n        this._readableState.updateNextTickIfOpen();\n        return this._readableState.unshift(data);\n    }\n    resume() {\n        this._duplexState |= READ_RESUMED_READ_AHEAD;\n        this._readableState.updateNextTick();\n        return this;\n    }\n    pause() {\n        this._duplexState &= this._readableState.readAhead === false ? READ_PAUSED_NO_READ_AHEAD : READ_PAUSED;\n        return this;\n    }\n    static _fromAsyncIterator(ite, opts) {\n        let destroy;\n        const rs = new Readable({\n            ...opts,\n            read (cb) {\n                ite.next().then(push).then(cb.bind(null, null)).catch(cb);\n            },\n            predestroy () {\n                destroy = ite.return();\n            },\n            destroy (cb) {\n                if (!destroy) return cb(null);\n                destroy.then(cb.bind(null, null)).catch(cb);\n            }\n        });\n        return rs;\n        function push(data) {\n            if (data.done) rs.push(null);\n            else rs.push(data.value);\n        }\n    }\n    static from(data, opts) {\n        if (isReadStreamx(data)) return data;\n        if (data[asyncIterator]) return this._fromAsyncIterator(data[asyncIterator](), opts);\n        if (!Array.isArray(data)) data = data === undefined ? [] : [\n            data\n        ];\n        let i = 0;\n        return new Readable({\n            ...opts,\n            read (cb) {\n                this.push(i === data.length ? null : data[i++]);\n                cb(null);\n            }\n        });\n    }\n    static isBackpressured(rs) {\n        return (rs._duplexState & READ_BACKPRESSURE_STATUS) !== 0 || rs._readableState.buffered >= rs._readableState.highWaterMark;\n    }\n    static isPaused(rs) {\n        return (rs._duplexState & READ_RESUMED) === 0;\n    }\n    [asyncIterator]() {\n        const stream = this;\n        let error = null;\n        let promiseResolve = null;\n        let promiseReject = null;\n        this.on(\"error\", (err)=>{\n            error = err;\n        });\n        this.on(\"readable\", onreadable);\n        this.on(\"close\", onclose);\n        return {\n            [asyncIterator] () {\n                return this;\n            },\n            next () {\n                return new Promise(function(resolve, reject) {\n                    promiseResolve = resolve;\n                    promiseReject = reject;\n                    const data = stream.read();\n                    if (data !== null) ondata(data);\n                    else if ((stream._duplexState & DESTROYED) !== 0) ondata(null);\n                });\n            },\n            return () {\n                return destroy(null);\n            },\n            throw (err) {\n                return destroy(err);\n            }\n        };\n        function onreadable() {\n            if (promiseResolve !== null) ondata(stream.read());\n        }\n        function onclose() {\n            if (promiseResolve !== null) ondata(null);\n        }\n        function ondata(data) {\n            if (promiseReject === null) return;\n            if (error) promiseReject(error);\n            else if (data === null && (stream._duplexState & READ_DONE) === 0) promiseReject(STREAM_DESTROYED);\n            else promiseResolve({\n                value: data,\n                done: data === null\n            });\n            promiseReject = promiseResolve = null;\n        }\n        function destroy(err) {\n            stream.destroy(err);\n            return new Promise((resolve, reject)=>{\n                if (stream._duplexState & DESTROYED) return resolve({\n                    value: undefined,\n                    done: true\n                });\n                stream.once(\"close\", function() {\n                    if (err) reject(err);\n                    else resolve({\n                        value: undefined,\n                        done: true\n                    });\n                });\n            });\n        }\n    }\n}\nclass Writable extends Stream {\n    constructor(opts){\n        super(opts);\n        this._duplexState |= OPENING | READ_DONE;\n        this._writableState = new WritableState(this, opts);\n        if (opts) {\n            if (opts.writev) this._writev = opts.writev;\n            if (opts.write) this._write = opts.write;\n            if (opts.final) this._final = opts.final;\n            if (opts.eagerOpen) this._writableState.updateNextTick();\n        }\n    }\n    cork() {\n        this._duplexState |= WRITE_CORKED;\n    }\n    uncork() {\n        this._duplexState &= WRITE_NOT_CORKED;\n        this._writableState.updateNextTick();\n    }\n    _writev(batch, cb) {\n        cb(null);\n    }\n    _write(data, cb) {\n        this._writableState.autoBatch(data, cb);\n    }\n    _final(cb) {\n        cb(null);\n    }\n    static isBackpressured(ws) {\n        return (ws._duplexState & WRITE_BACKPRESSURE_STATUS) !== 0;\n    }\n    static drained(ws) {\n        if (ws.destroyed) return Promise.resolve(false);\n        const state = ws._writableState;\n        const pending = isWritev(ws) ? Math.min(1, state.queue.length) : state.queue.length;\n        const writes = pending + (ws._duplexState & WRITE_WRITING ? 1 : 0);\n        if (writes === 0) return Promise.resolve(true);\n        if (state.drains === null) state.drains = [];\n        return new Promise((resolve)=>{\n            state.drains.push({\n                writes,\n                resolve\n            });\n        });\n    }\n    write(data) {\n        this._writableState.updateNextTick();\n        return this._writableState.push(data);\n    }\n    end(data) {\n        this._writableState.updateNextTick();\n        this._writableState.end(data);\n        return this;\n    }\n}\nclass Duplex extends Readable {\n    constructor(opts){\n        super(opts);\n        this._duplexState = OPENING | this._duplexState & READ_READ_AHEAD;\n        this._writableState = new WritableState(this, opts);\n        if (opts) {\n            if (opts.writev) this._writev = opts.writev;\n            if (opts.write) this._write = opts.write;\n            if (opts.final) this._final = opts.final;\n        }\n    }\n    cork() {\n        this._duplexState |= WRITE_CORKED;\n    }\n    uncork() {\n        this._duplexState &= WRITE_NOT_CORKED;\n        this._writableState.updateNextTick();\n    }\n    _writev(batch, cb) {\n        cb(null);\n    }\n    _write(data, cb) {\n        this._writableState.autoBatch(data, cb);\n    }\n    _final(cb) {\n        cb(null);\n    }\n    write(data) {\n        this._writableState.updateNextTick();\n        return this._writableState.push(data);\n    }\n    end(data) {\n        this._writableState.updateNextTick();\n        this._writableState.end(data);\n        return this;\n    }\n}\nclass Transform extends Duplex {\n    constructor(opts){\n        super(opts);\n        this._transformState = new TransformState(this);\n        if (opts) {\n            if (opts.transform) this._transform = opts.transform;\n            if (opts.flush) this._flush = opts.flush;\n        }\n    }\n    _write(data, cb) {\n        if (this._readableState.buffered >= this._readableState.highWaterMark) {\n            this._transformState.data = data;\n        } else {\n            this._transform(data, this._transformState.afterTransform);\n        }\n    }\n    _read(cb) {\n        if (this._transformState.data !== null) {\n            const data = this._transformState.data;\n            this._transformState.data = null;\n            cb(null);\n            this._transform(data, this._transformState.afterTransform);\n        } else {\n            cb(null);\n        }\n    }\n    destroy(err) {\n        super.destroy(err);\n        if (this._transformState.data !== null) {\n            this._transformState.data = null;\n            this._transformState.afterTransform();\n        }\n    }\n    _transform(data, cb) {\n        cb(null, data);\n    }\n    _flush(cb) {\n        cb(null);\n    }\n    _final(cb) {\n        this._transformState.afterFinal = cb;\n        this._flush(transformAfterFlush.bind(this));\n    }\n}\nclass PassThrough extends Transform {\n}\nfunction transformAfterFlush(err, data) {\n    const cb = this._transformState.afterFinal;\n    if (err) return cb(err);\n    if (data !== null && data !== undefined) this.push(data);\n    this.push(null);\n    cb(null);\n}\nfunction pipelinePromise(...streams) {\n    return new Promise((resolve, reject)=>{\n        return pipeline(...streams, (err)=>{\n            if (err) return reject(err);\n            resolve();\n        });\n    });\n}\nfunction pipeline(stream, ...streams) {\n    const all = Array.isArray(stream) ? [\n        ...stream,\n        ...streams\n    ] : [\n        stream,\n        ...streams\n    ];\n    const done = all.length && typeof all[all.length - 1] === \"function\" ? all.pop() : null;\n    if (all.length < 2) throw new Error(\"Pipeline requires at least 2 streams\");\n    let src = all[0];\n    let dest = null;\n    let error = null;\n    for(let i = 1; i < all.length; i++){\n        dest = all[i];\n        if (isStreamx(src)) {\n            src.pipe(dest, onerror);\n        } else {\n            errorHandle(src, true, i > 1, onerror);\n            src.pipe(dest);\n        }\n        src = dest;\n    }\n    if (done) {\n        let fin = false;\n        const autoDestroy = isStreamx(dest) || !!(dest._writableState && dest._writableState.autoDestroy);\n        dest.on(\"error\", (err)=>{\n            if (error === null) error = err;\n        });\n        dest.on(\"finish\", ()=>{\n            fin = true;\n            if (!autoDestroy) done(error);\n        });\n        if (autoDestroy) {\n            dest.on(\"close\", ()=>done(error || (fin ? null : PREMATURE_CLOSE)));\n        }\n    }\n    return dest;\n    function errorHandle(s, rd, wr, onerror) {\n        s.on(\"error\", onerror);\n        s.on(\"close\", onclose);\n        function onclose() {\n            if (rd && s._readableState && !s._readableState.ended) return onerror(PREMATURE_CLOSE);\n            if (wr && s._writableState && !s._writableState.ended) return onerror(PREMATURE_CLOSE);\n        }\n    }\n    function onerror(err) {\n        if (!err || error) return;\n        error = err;\n        for (const s of all){\n            s.destroy(err);\n        }\n    }\n}\nfunction echo(s) {\n    return s;\n}\nfunction isStream(stream) {\n    return !!stream._readableState || !!stream._writableState;\n}\nfunction isStreamx(stream) {\n    return typeof stream._duplexState === \"number\" && isStream(stream);\n}\nfunction isEnded(stream) {\n    return !!stream._readableState && stream._readableState.ended;\n}\nfunction isFinished(stream) {\n    return !!stream._writableState && stream._writableState.ended;\n}\nfunction getStreamError(stream, opts = {}) {\n    const err = stream._readableState && stream._readableState.error || stream._writableState && stream._writableState.error;\n    // avoid implicit errors by default\n    return !opts.all && err === STREAM_DESTROYED ? null : err;\n}\nfunction isReadStreamx(stream) {\n    return isStreamx(stream) && stream.readable;\n}\nfunction isDisturbed(stream) {\n    return (stream._duplexState & OPENING) !== OPENING || (stream._duplexState & ACTIVE_OR_TICKING) !== 0;\n}\nfunction isTypedArray(data) {\n    return typeof data === \"object\" && data !== null && typeof data.byteLength === \"number\";\n}\nfunction defaultByteLength(data) {\n    return isTypedArray(data) ? data.byteLength : 1024;\n}\nfunction noop() {}\nfunction abort() {\n    this.destroy(new Error(\"Stream aborted.\"));\n}\nfunction isWritev(s) {\n    return s._writev !== Writable.prototype._writev && s._writev !== Duplex.prototype._writev;\n}\nmodule.exports = {\n    pipeline,\n    pipelinePromise,\n    isStream,\n    isStreamx,\n    isEnded,\n    isFinished,\n    isDisturbed,\n    getStreamError,\n    Stream,\n    Writable,\n    Readable,\n    Duplex,\n    Transform,\n    // Export PassThrough for compatibility with Node.js core's stream module\n    PassThrough\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/streamx/index.js\n");

/***/ })

};
;