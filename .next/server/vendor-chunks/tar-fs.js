/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/tar-fs";
exports.ids = ["vendor-chunks/tar-fs"];
exports.modules = {

/***/ "(rsc)/./node_modules/tar-fs/index.js":
/*!**************************************!*\
  !*** ./node_modules/tar-fs/index.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("const tar = __webpack_require__(/*! tar-stream */ \"(rsc)/./node_modules/tar-stream/index.js\");\nconst pump = __webpack_require__(/*! pump */ \"(rsc)/./node_modules/pump/index.js\");\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst path = __webpack_require__(/*! path */ \"path\");\nconst win32 = (global.Bare?.platform || process.platform) === \"win32\";\nexports.pack = function pack(cwd, opts) {\n    if (!cwd) cwd = \".\";\n    if (!opts) opts = {};\n    const xfs = opts.fs || fs;\n    const ignore = opts.ignore || opts.filter || noop;\n    const mapStream = opts.mapStream || echo;\n    const statNext = statAll(xfs, opts.dereference ? xfs.stat : xfs.lstat, cwd, ignore, opts.entries, opts.sort);\n    const strict = opts.strict !== false;\n    const umask = typeof opts.umask === \"number\" ? ~opts.umask : ~processUmask();\n    const pack = opts.pack || tar.pack();\n    const finish = opts.finish || noop;\n    let map = opts.map || noop;\n    let dmode = typeof opts.dmode === \"number\" ? opts.dmode : 0;\n    let fmode = typeof opts.fmode === \"number\" ? opts.fmode : 0;\n    if (opts.strip) map = strip(map, opts.strip);\n    if (opts.readable) {\n        dmode |= parseInt(555, 8);\n        fmode |= parseInt(444, 8);\n    }\n    if (opts.writable) {\n        dmode |= parseInt(333, 8);\n        fmode |= parseInt(222, 8);\n    }\n    onnextentry();\n    function onsymlink(filename, header) {\n        xfs.readlink(path.join(cwd, filename), function(err, linkname) {\n            if (err) return pack.destroy(err);\n            header.linkname = normalize(linkname);\n            pack.entry(header, onnextentry);\n        });\n    }\n    function onstat(err, filename, stat) {\n        if (pack.destroyed) return;\n        if (err) return pack.destroy(err);\n        if (!filename) {\n            if (opts.finalize !== false) pack.finalize();\n            return finish(pack);\n        }\n        if (stat.isSocket()) return onnextentry() // tar does not support sockets...\n        ;\n        let header = {\n            name: normalize(filename),\n            mode: (stat.mode | (stat.isDirectory() ? dmode : fmode)) & umask,\n            mtime: stat.mtime,\n            size: stat.size,\n            type: \"file\",\n            uid: stat.uid,\n            gid: stat.gid\n        };\n        if (stat.isDirectory()) {\n            header.size = 0;\n            header.type = \"directory\";\n            header = map(header) || header;\n            return pack.entry(header, onnextentry);\n        }\n        if (stat.isSymbolicLink()) {\n            header.size = 0;\n            header.type = \"symlink\";\n            header = map(header) || header;\n            return onsymlink(filename, header);\n        }\n        // TODO: add fifo etc...\n        header = map(header) || header;\n        if (!stat.isFile()) {\n            if (strict) return pack.destroy(new Error(\"unsupported type for \" + filename));\n            return onnextentry();\n        }\n        const entry = pack.entry(header, onnextentry);\n        const rs = mapStream(xfs.createReadStream(path.join(cwd, filename), {\n            start: 0,\n            end: header.size > 0 ? header.size - 1 : header.size\n        }), header);\n        rs.on(\"error\", function(err) {\n            entry.destroy(err);\n        });\n        pump(rs, entry);\n    }\n    function onnextentry(err) {\n        if (err) return pack.destroy(err);\n        statNext(onstat);\n    }\n    return pack;\n};\nfunction head(list) {\n    return list.length ? list[list.length - 1] : null;\n}\nfunction processGetuid() {\n    return process.getuid ? process.getuid() : -1;\n}\nfunction processUmask() {\n    return process.umask ? process.umask() : 0;\n}\nexports.extract = function extract(cwd, opts) {\n    if (!cwd) cwd = \".\";\n    if (!opts) opts = {};\n    cwd = path.resolve(cwd);\n    const xfs = opts.fs || fs;\n    const ignore = opts.ignore || opts.filter || noop;\n    const mapStream = opts.mapStream || echo;\n    const own = opts.chown !== false && !win32 && processGetuid() === 0;\n    const extract = opts.extract || tar.extract();\n    const stack = [];\n    const now = new Date();\n    const umask = typeof opts.umask === \"number\" ? ~opts.umask : ~processUmask();\n    const strict = opts.strict !== false;\n    let map = opts.map || noop;\n    let dmode = typeof opts.dmode === \"number\" ? opts.dmode : 0;\n    let fmode = typeof opts.fmode === \"number\" ? opts.fmode : 0;\n    if (opts.strip) map = strip(map, opts.strip);\n    if (opts.readable) {\n        dmode |= parseInt(555, 8);\n        fmode |= parseInt(444, 8);\n    }\n    if (opts.writable) {\n        dmode |= parseInt(333, 8);\n        fmode |= parseInt(222, 8);\n    }\n    extract.on(\"entry\", onentry);\n    if (opts.finish) extract.on(\"finish\", opts.finish);\n    return extract;\n    function onentry(header, stream, next) {\n        header = map(header) || header;\n        header.name = normalize(header.name);\n        const name = path.join(cwd, path.join(\"/\", header.name));\n        if (ignore(name, header)) {\n            stream.resume();\n            return next();\n        }\n        const dir = path.join(name, \".\") === path.join(cwd, \".\") ? cwd : path.dirname(name);\n        validate(xfs, dir, path.join(cwd, \".\"), function(err, valid) {\n            if (err) return next(err);\n            if (!valid) return next(new Error(dir + \" is not a valid path\"));\n            if (header.type === \"directory\") {\n                stack.push([\n                    name,\n                    header.mtime\n                ]);\n                return mkdirfix(name, {\n                    fs: xfs,\n                    own,\n                    uid: header.uid,\n                    gid: header.gid,\n                    mode: header.mode\n                }, stat);\n            }\n            mkdirfix(dir, {\n                fs: xfs,\n                own,\n                uid: header.uid,\n                gid: header.gid,\n                // normally, the folders with rights and owner should be part of the TAR file\n                // if this is not the case, create folder for same user as file and with\n                // standard permissions of 0o755 (rwxr-xr-x)\n                mode: 493\n            }, function(err) {\n                if (err) return next(err);\n                switch(header.type){\n                    case \"file\":\n                        return onfile();\n                    case \"link\":\n                        return onlink();\n                    case \"symlink\":\n                        return onsymlink();\n                }\n                if (strict) return next(new Error(\"unsupported type for \" + name + \" (\" + header.type + \")\"));\n                stream.resume();\n                next();\n            });\n        });\n        function stat(err) {\n            if (err) return next(err);\n            utimes(name, header, function(err) {\n                if (err) return next(err);\n                if (win32) return next();\n                chperm(name, header, next);\n            });\n        }\n        function onsymlink() {\n            if (win32) return next() // skip symlinks on win for now before it can be tested\n            ;\n            xfs.unlink(name, function() {\n                const dst = path.resolve(path.dirname(name), header.linkname);\n                if (!inCwd(dst)) return next(new Error(name + \" is not a valid symlink\"));\n                xfs.symlink(header.linkname, name, stat);\n            });\n        }\n        function onlink() {\n            if (win32) return next() // skip links on win for now before it can be tested\n            ;\n            xfs.unlink(name, function() {\n                const link = path.join(cwd, path.join(\"/\", header.linkname));\n                fs.realpath(link, function(err, dst) {\n                    if (err || !inCwd(dst)) return next(new Error(name + \" is not a valid hardlink\"));\n                    xfs.link(dst, name, function(err) {\n                        if (err && err.code === \"EPERM\" && opts.hardlinkAsFilesFallback) {\n                            stream = xfs.createReadStream(dst);\n                            return onfile();\n                        }\n                        stat(err);\n                    });\n                });\n            });\n        }\n        function inCwd(dst) {\n            return dst.startsWith(cwd);\n        }\n        function onfile() {\n            const ws = xfs.createWriteStream(name);\n            const rs = mapStream(stream, header);\n            ws.on(\"error\", function(err) {\n                rs.destroy(err);\n            });\n            pump(rs, ws, function(err) {\n                if (err) return next(err);\n                ws.on(\"close\", stat);\n            });\n        }\n    }\n    function utimesParent(name, cb) {\n        let top;\n        while((top = head(stack)) && name.slice(0, top[0].length) !== top[0])stack.pop();\n        if (!top) return cb();\n        xfs.utimes(top[0], now, top[1], cb);\n    }\n    function utimes(name, header, cb) {\n        if (opts.utimes === false) return cb();\n        if (header.type === \"directory\") return xfs.utimes(name, now, header.mtime, cb);\n        if (header.type === \"symlink\") return utimesParent(name, cb) // TODO: how to set mtime on link?\n        ;\n        xfs.utimes(name, now, header.mtime, function(err) {\n            if (err) return cb(err);\n            utimesParent(name, cb);\n        });\n    }\n    function chperm(name, header, cb) {\n        const link = header.type === \"symlink\";\n        /* eslint-disable n/no-deprecated-api */ const chmod = link ? xfs.lchmod : xfs.chmod;\n        const chown = link ? xfs.lchown : xfs.chown;\n        /* eslint-enable n/no-deprecated-api */ if (!chmod) return cb();\n        const mode = (header.mode | (header.type === \"directory\" ? dmode : fmode)) & umask;\n        if (chown && own) chown.call(xfs, name, header.uid, header.gid, onchown);\n        else onchown(null);\n        function onchown(err) {\n            if (err) return cb(err);\n            if (!chmod) return cb();\n            chmod.call(xfs, name, mode, cb);\n        }\n    }\n    function mkdirfix(name, opts, cb) {\n        // when mkdir is called on an existing directory, the permissions\n        // will be overwritten (?), to avoid this we check for its existance first\n        xfs.stat(name, function(err) {\n            if (!err) return cb(null);\n            if (err.code !== \"ENOENT\") return cb(err);\n            xfs.mkdir(name, {\n                mode: opts.mode,\n                recursive: true\n            }, function(err, made) {\n                if (err) return cb(err);\n                chperm(name, opts, cb);\n            });\n        });\n    }\n};\nfunction validate(fs, name, root, cb) {\n    if (name === root) return cb(null, true);\n    fs.lstat(name, function(err, st) {\n        if (err && err.code !== \"ENOENT\" && err.code !== \"EPERM\") return cb(err);\n        if (err || st.isDirectory()) return validate(fs, path.join(name, \"..\"), root, cb);\n        cb(null, false);\n    });\n}\nfunction noop() {}\nfunction echo(name) {\n    return name;\n}\nfunction normalize(name) {\n    return win32 ? name.replace(/\\\\/g, \"/\").replace(/[:?<>|]/g, \"_\") : name;\n}\nfunction statAll(fs, stat, cwd, ignore, entries, sort) {\n    if (!entries) entries = [\n        \".\"\n    ];\n    const queue = entries.slice(0);\n    return function loop(callback) {\n        if (!queue.length) return callback(null);\n        const next = queue.shift();\n        const nextAbs = path.join(cwd, next);\n        stat.call(fs, nextAbs, function(err, stat) {\n            // ignore errors if the files were deleted while buffering\n            if (err) return callback(entries.indexOf(next) === -1 && err.code === \"ENOENT\" ? null : err);\n            if (!stat.isDirectory()) return callback(null, next, stat);\n            fs.readdir(nextAbs, function(err, files) {\n                if (err) return callback(err);\n                if (sort) files.sort();\n                for(let i = 0; i < files.length; i++){\n                    if (!ignore(path.join(cwd, next, files[i]))) queue.push(path.join(next, files[i]));\n                }\n                callback(null, next, stat);\n            });\n        });\n    };\n}\nfunction strip(map, level) {\n    return function(header) {\n        header.name = header.name.split(\"/\").slice(level).join(\"/\");\n        const linkname = header.linkname;\n        if (linkname && (header.type === \"link\" || path.isAbsolute(linkname))) {\n            header.linkname = linkname.split(\"/\").slice(level).join(\"/\");\n        }\n        return map(header);\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/tar-fs/index.js\n");

/***/ })

};
;